
DMA Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001b14  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000004  08001cac  08001cac  00011cac  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001cb0  08001cb0  0002006c  2**0
                  CONTENTS
  4 .ARM          00000000  08001cb0  08001cb0  0002006c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001cb0  08001cb0  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001cb0  08001cb0  00011cb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001cb4  08001cb4  00011cb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08001cb8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000340  2000006c  08001d24  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003ac  08001d24  000203ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000026e5  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000006bc  00000000  00000000  00022781  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000170  00000000  00000000  00022e40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000118  00000000  00000000  00022fb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000ea67  00000000  00000000  000230c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000123c  00000000  00000000  00031b2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00054092  00000000  00000000  00032d6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00086dfd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000072c  00000000  00000000  00086e50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000006c 	.word	0x2000006c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08001c94 	.word	0x08001c94

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000070 	.word	0x20000070
 80001d4:	08001c94 	.word	0x08001c94

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2uiz>:
 8000ab0:	004a      	lsls	r2, r1, #1
 8000ab2:	d211      	bcs.n	8000ad8 <__aeabi_d2uiz+0x28>
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d211      	bcs.n	8000ade <__aeabi_d2uiz+0x2e>
 8000aba:	d50d      	bpl.n	8000ad8 <__aeabi_d2uiz+0x28>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d40e      	bmi.n	8000ae4 <__aeabi_d2uiz+0x34>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ad6:	4770      	bx	lr
 8000ad8:	f04f 0000 	mov.w	r0, #0
 8000adc:	4770      	bx	lr
 8000ade:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_d2uiz+0x3a>
 8000ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0000 	mov.w	r0, #0
 8000aee:	4770      	bx	lr

08000af0 <_Get_Interrupt_Bits>:
#include "DMA.h"
#include "GPIO.h"
#include <math.h>

uint32 _Get_Interrupt_Bits(DMA_STREAM stream)
{
 8000af0:	b480      	push	{r7}
 8000af2:	b085      	sub	sp, #20
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	4603      	mov	r3, r0
 8000af8:	71fb      	strb	r3, [r7, #7]
	//	TRANSFER ERR bits		3		9		19		25
	//	HALF TRANS bits			4		10		20		26
	//	TRANS COMPLETE bits		5		11		21		27

	// couldn't find a simpler way to access these bits directly, because of the scattered reserved bits
	uint32 interrupts = FIFO_ERROR | DIRECT_MODE_ERROR | TRANSFER_ERROR | HALF_TRANSFER_COMPLETE | TRANSFER_COMPLETE;
 8000afa:	233d      	movs	r3, #61	; 0x3d
 8000afc:	60fb      	str	r3, [r7, #12]

	for (int i = 0; i < (stream % 4); i++)
 8000afe:	2300      	movs	r3, #0
 8000b00:	60bb      	str	r3, [r7, #8]
 8000b02:	e00c      	b.n	8000b1e <_Get_Interrupt_Bits+0x2e>
	{
		if (i == 1)
 8000b04:	68bb      	ldr	r3, [r7, #8]
 8000b06:	2b01      	cmp	r3, #1
 8000b08:	d103      	bne.n	8000b12 <_Get_Interrupt_Bits+0x22>
		{
			interrupts = interrupts << 10;
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	029b      	lsls	r3, r3, #10
 8000b0e:	60fb      	str	r3, [r7, #12]
 8000b10:	e002      	b.n	8000b18 <_Get_Interrupt_Bits+0x28>
		}
		else
		{
			interrupts = interrupts << 6;
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	019b      	lsls	r3, r3, #6
 8000b16:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < (stream % 4); i++)
 8000b18:	68bb      	ldr	r3, [r7, #8]
 8000b1a:	3301      	adds	r3, #1
 8000b1c:	60bb      	str	r3, [r7, #8]
 8000b1e:	79fb      	ldrb	r3, [r7, #7]
 8000b20:	f003 0303 	and.w	r3, r3, #3
 8000b24:	68ba      	ldr	r2, [r7, #8]
 8000b26:	429a      	cmp	r2, r3
 8000b28:	dbec      	blt.n	8000b04 <_Get_Interrupt_Bits+0x14>
		}
	}

	return interrupts;
 8000b2a:	68fb      	ldr	r3, [r7, #12]
}
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	3714      	adds	r7, #20
 8000b30:	46bd      	mov	sp, r7
 8000b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b36:	4770      	bx	lr

08000b38 <Clear_One_Interrupt>:

void Clear_One_Interrupt(DMA_Registers *LINE, const DMA_STREAM stream, DMA_INTERRUPTS interrupt_type)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b084      	sub	sp, #16
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
 8000b40:	460b      	mov	r3, r1
 8000b42:	70fb      	strb	r3, [r7, #3]
 8000b44:	4613      	mov	r3, r2
 8000b46:	70bb      	strb	r3, [r7, #2]
	uint32 interrupt = log2(interrupt_type);
 8000b48:	78bb      	ldrb	r3, [r7, #2]
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f7ff fc86 	bl	800045c <__aeabi_ui2d>
 8000b50:	4602      	mov	r2, r0
 8000b52:	460b      	mov	r3, r1
 8000b54:	ec43 2b10 	vmov	d0, r2, r3
 8000b58:	f000 fe8a 	bl	8001870 <log>
 8000b5c:	ec51 0b10 	vmov	r0, r1, d0
 8000b60:	a323      	add	r3, pc, #140	; (adr r3, 8000bf0 <Clear_One_Interrupt+0xb8>)
 8000b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b66:	f7ff fe1d 	bl	80007a4 <__aeabi_ddiv>
 8000b6a:	4602      	mov	r2, r0
 8000b6c:	460b      	mov	r3, r1
 8000b6e:	4610      	mov	r0, r2
 8000b70:	4619      	mov	r1, r3
 8000b72:	f7ff ff9d 	bl	8000ab0 <__aeabi_d2uiz>
 8000b76:	4603      	mov	r3, r0
 8000b78:	60fb      	str	r3, [r7, #12]
	switch (stream)
 8000b7a:	78fb      	ldrb	r3, [r7, #3]
 8000b7c:	2b07      	cmp	r3, #7
 8000b7e:	d81f      	bhi.n	8000bc0 <Clear_One_Interrupt+0x88>
 8000b80:	a201      	add	r2, pc, #4	; (adr r2, 8000b88 <Clear_One_Interrupt+0x50>)
 8000b82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b86:	bf00      	nop
 8000b88:	08000bc1 	.word	0x08000bc1
 8000b8c:	08000ba9 	.word	0x08000ba9
 8000b90:	08000bb1 	.word	0x08000bb1
 8000b94:	08000bb9 	.word	0x08000bb9
 8000b98:	08000bc1 	.word	0x08000bc1
 8000b9c:	08000ba9 	.word	0x08000ba9
 8000ba0:	08000bb1 	.word	0x08000bb1
 8000ba4:	08000bb9 	.word	0x08000bb9
	case STREAM0:
	case STREAM4:
		break;
	case STREAM1:
	case STREAM5:
		interrupt <<= 6;
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	019b      	lsls	r3, r3, #6
 8000bac:	60fb      	str	r3, [r7, #12]
		break;
 8000bae:	e007      	b.n	8000bc0 <Clear_One_Interrupt+0x88>
	case STREAM2:
	case STREAM6:
		interrupt <<= 16;
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	041b      	lsls	r3, r3, #16
 8000bb4:	60fb      	str	r3, [r7, #12]
		break;
 8000bb6:	e003      	b.n	8000bc0 <Clear_One_Interrupt+0x88>
	case STREAM3:
	case STREAM7:
		interrupt <<= 22;
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	059b      	lsls	r3, r3, #22
 8000bbc:	60fb      	str	r3, [r7, #12]
		break;
 8000bbe:	bf00      	nop
	}
	LINE->IFCR[stream / 4] |= interrupt;
 8000bc0:	78fb      	ldrb	r3, [r7, #3]
 8000bc2:	089b      	lsrs	r3, r3, #2
 8000bc4:	b2db      	uxtb	r3, r3
 8000bc6:	461a      	mov	r2, r3
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	3202      	adds	r2, #2
 8000bcc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000bd0:	78fb      	ldrb	r3, [r7, #3]
 8000bd2:	089b      	lsrs	r3, r3, #2
 8000bd4:	b2db      	uxtb	r3, r3
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	ea42 0103 	orr.w	r1, r2, r3
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	1c82      	adds	r2, r0, #2
 8000be2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000be6:	bf00      	nop
 8000be8:	3710      	adds	r7, #16
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	fefa39ef 	.word	0xfefa39ef
 8000bf4:	3fe62e42 	.word	0x3fe62e42

08000bf8 <_Clear_Interrupts>:

void _Clear_Interrupts(DMA_Registers *LINE, const DMA_InitializationObject *config_obj)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b084      	sub	sp, #16
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
 8000c00:	6039      	str	r1, [r7, #0]
	uint32 interrupts = _Get_Interrupt_Bits(config_obj->stream);
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	781b      	ldrb	r3, [r3, #0]
 8000c06:	4618      	mov	r0, r3
 8000c08:	f7ff ff72 	bl	8000af0 <_Get_Interrupt_Bits>
 8000c0c:	60f8      	str	r0, [r7, #12]
	LINE->IFCR[config_obj->stream / 4] |= interrupts;
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	781b      	ldrb	r3, [r3, #0]
 8000c12:	089b      	lsrs	r3, r3, #2
 8000c14:	b2db      	uxtb	r3, r3
 8000c16:	461a      	mov	r2, r3
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	3202      	adds	r2, #2
 8000c1c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	089b      	lsrs	r3, r3, #2
 8000c26:	b2db      	uxtb	r3, r3
 8000c28:	4618      	mov	r0, r3
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	ea42 0103 	orr.w	r1, r2, r3
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	1c82      	adds	r2, r0, #2
 8000c34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000c38:	bf00      	nop
 8000c3a:	3710      	adds	r7, #16
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}

08000c40 <DMA_EnableClock>:

void DMA_EnableClock(DMA_Registers *LINE)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b083      	sub	sp, #12
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
	//	Enabling the RCC Line for the DMA
	(LINE == DMA1) ? SETBIT(*RCC_AHB1ENR, 21) : SETBIT(*RCC_AHB1ENR, 22);
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	4a0b      	ldr	r2, [pc, #44]	; (8000c78 <DMA_EnableClock+0x38>)
 8000c4c:	4293      	cmp	r3, r2
 8000c4e:	d106      	bne.n	8000c5e <DMA_EnableClock+0x1e>
 8000c50:	4b0a      	ldr	r3, [pc, #40]	; (8000c7c <DMA_EnableClock+0x3c>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	4a09      	ldr	r2, [pc, #36]	; (8000c7c <DMA_EnableClock+0x3c>)
 8000c56:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c5a:	6013      	str	r3, [r2, #0]
}
 8000c5c:	e005      	b.n	8000c6a <DMA_EnableClock+0x2a>
	(LINE == DMA1) ? SETBIT(*RCC_AHB1ENR, 21) : SETBIT(*RCC_AHB1ENR, 22);
 8000c5e:	4b07      	ldr	r3, [pc, #28]	; (8000c7c <DMA_EnableClock+0x3c>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	4a06      	ldr	r2, [pc, #24]	; (8000c7c <DMA_EnableClock+0x3c>)
 8000c64:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c68:	6013      	str	r3, [r2, #0]
}
 8000c6a:	bf00      	nop
 8000c6c:	370c      	adds	r7, #12
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop
 8000c78:	40026000 	.word	0x40026000
 8000c7c:	40023830 	.word	0x40023830

08000c80 <DMA_Config>:

void DMA_Config(DMA_Registers *LINE, DMA_InitializationObject *config_obj)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
 8000c88:	6039      	str	r1, [r7, #0]
	//	Making Sure the DMA is Disabled for that specific channel in order to unlock configurations
	LINE->S[config_obj->stream].CR.Bits.EN = 0;
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	781b      	ldrb	r3, [r3, #0]
 8000c8e:	4619      	mov	r1, r3
 8000c90:	687a      	ldr	r2, [r7, #4]
 8000c92:	460b      	mov	r3, r1
 8000c94:	005b      	lsls	r3, r3, #1
 8000c96:	440b      	add	r3, r1
 8000c98:	00db      	lsls	r3, r3, #3
 8000c9a:	4413      	add	r3, r2
 8000c9c:	f103 0210 	add.w	r2, r3, #16
 8000ca0:	6813      	ldr	r3, [r2, #0]
 8000ca2:	f36f 0300 	bfc	r3, #0, #1
 8000ca6:	6013      	str	r3, [r2, #0]
	while (LINE->S[config_obj->stream].CR.Bits.EN)
 8000ca8:	bf00      	nop
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	781b      	ldrb	r3, [r3, #0]
 8000cae:	4619      	mov	r1, r3
 8000cb0:	687a      	ldr	r2, [r7, #4]
 8000cb2:	460b      	mov	r3, r1
 8000cb4:	005b      	lsls	r3, r3, #1
 8000cb6:	440b      	add	r3, r1
 8000cb8:	00db      	lsls	r3, r3, #3
 8000cba:	4413      	add	r3, r2
 8000cbc:	3310      	adds	r3, #16
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000cc4:	b2db      	uxtb	r3, r3
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d1ef      	bne.n	8000caa <DMA_Config+0x2a>
		;
	//	Clearing all interrupts
	_Clear_Interrupts(LINE, config_obj);
 8000cca:	6839      	ldr	r1, [r7, #0]
 8000ccc:	6878      	ldr	r0, [r7, #4]
 8000cce:	f7ff ff93 	bl	8000bf8 <_Clear_Interrupts>
	//	Channel Selection
	LINE->S[config_obj->stream].CR.Bits.CHSEL = config_obj->channel;
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	785a      	ldrb	r2, [r3, #1]
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	781b      	ldrb	r3, [r3, #0]
 8000cda:	4618      	mov	r0, r3
 8000cdc:	4613      	mov	r3, r2
 8000cde:	f003 0307 	and.w	r3, r3, #7
 8000ce2:	b2d9      	uxtb	r1, r3
 8000ce4:	687a      	ldr	r2, [r7, #4]
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	005b      	lsls	r3, r3, #1
 8000cea:	4403      	add	r3, r0
 8000cec:	00db      	lsls	r3, r3, #3
 8000cee:	4413      	add	r3, r2
 8000cf0:	f103 0210 	add.w	r2, r3, #16
 8000cf4:	6813      	ldr	r3, [r2, #0]
 8000cf6:	f361 635b 	bfi	r3, r1, #25, #3
 8000cfa:	6013      	str	r3, [r2, #0]
	//	Configure the number of data to be transfered
	LINE->S[config_obj->stream].NDTR.Bits.NDT = config_obj->n_of_transfers;
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	4618      	mov	r0, r3
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	8859      	ldrh	r1, [r3, #2]
 8000d06:	687a      	ldr	r2, [r7, #4]
 8000d08:	4603      	mov	r3, r0
 8000d0a:	005b      	lsls	r3, r3, #1
 8000d0c:	4403      	add	r3, r0
 8000d0e:	00db      	lsls	r3, r3, #3
 8000d10:	4413      	add	r3, r2
 8000d12:	f103 0210 	add.w	r2, r3, #16
 8000d16:	6853      	ldr	r3, [r2, #4]
 8000d18:	f361 030f 	bfi	r3, r1, #0, #16
 8000d1c:	6053      	str	r3, [r2, #4]
	// Set peripheral address (In case of Memory-Memory it carries source address)
	LINE->S[config_obj->stream].PAR.Reg = config_obj->peripheral_address;
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	781b      	ldrb	r3, [r3, #0]
 8000d22:	461a      	mov	r2, r3
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	6859      	ldr	r1, [r3, #4]
 8000d28:	6878      	ldr	r0, [r7, #4]
 8000d2a:	3201      	adds	r2, #1
 8000d2c:	4613      	mov	r3, r2
 8000d2e:	005b      	lsls	r3, r3, #1
 8000d30:	4413      	add	r3, r2
 8000d32:	00db      	lsls	r3, r3, #3
 8000d34:	4403      	add	r3, r0
 8000d36:	6019      	str	r1, [r3, #0]
	// Set Memory 0 address (In case of Memory-Memory it carries destination address)
	LINE->S[config_obj->stream].M0AR.Reg = config_obj->memory_address;
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	461a      	mov	r2, r3
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	6899      	ldr	r1, [r3, #8]
 8000d42:	6878      	ldr	r0, [r7, #4]
 8000d44:	3201      	adds	r2, #1
 8000d46:	4613      	mov	r3, r2
 8000d48:	005b      	lsls	r3, r3, #1
 8000d4a:	4413      	add	r3, r2
 8000d4c:	00db      	lsls	r3, r3, #3
 8000d4e:	4403      	add	r3, r0
 8000d50:	3304      	adds	r3, #4
 8000d52:	6019      	str	r1, [r3, #0]
	//	Select the priority of the transfer
	LINE->S[config_obj->stream].CR.Bits.PL = config_obj->priority;
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	7b1a      	ldrb	r2, [r3, #12]
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	4613      	mov	r3, r2
 8000d60:	f003 0303 	and.w	r3, r3, #3
 8000d64:	b2d9      	uxtb	r1, r3
 8000d66:	687a      	ldr	r2, [r7, #4]
 8000d68:	4603      	mov	r3, r0
 8000d6a:	005b      	lsls	r3, r3, #1
 8000d6c:	4403      	add	r3, r0
 8000d6e:	00db      	lsls	r3, r3, #3
 8000d70:	4413      	add	r3, r2
 8000d72:	f103 0210 	add.w	r2, r3, #16
 8000d76:	6813      	ldr	r3, [r2, #0]
 8000d78:	f361 4311 	bfi	r3, r1, #16, #2
 8000d7c:	6013      	str	r3, [r2, #0]
	// Set the data transfer direction
	LINE->S[config_obj->stream].CR.Bits.DIR = config_obj->direction;
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	7b5a      	ldrb	r2, [r3, #13]
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	781b      	ldrb	r3, [r3, #0]
 8000d86:	4618      	mov	r0, r3
 8000d88:	4613      	mov	r3, r2
 8000d8a:	f003 0303 	and.w	r3, r3, #3
 8000d8e:	b2d9      	uxtb	r1, r3
 8000d90:	687a      	ldr	r2, [r7, #4]
 8000d92:	4603      	mov	r3, r0
 8000d94:	005b      	lsls	r3, r3, #1
 8000d96:	4403      	add	r3, r0
 8000d98:	00db      	lsls	r3, r3, #3
 8000d9a:	4413      	add	r3, r2
 8000d9c:	f103 0210 	add.w	r2, r3, #16
 8000da0:	6813      	ldr	r3, [r2, #0]
 8000da2:	f361 1387 	bfi	r3, r1, #6, #2
 8000da6:	6013      	str	r3, [r2, #0]
	// Set Whether to use direct or FIFO or Direct Mode
	LINE->S[config_obj->stream].FCR.Bits.DMDIS = config_obj->direct_mode;
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	7b9a      	ldrb	r2, [r3, #14]
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	4618      	mov	r0, r3
 8000db2:	4613      	mov	r3, r2
 8000db4:	f003 0301 	and.w	r3, r3, #1
 8000db8:	b2d9      	uxtb	r1, r3
 8000dba:	687a      	ldr	r2, [r7, #4]
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	005b      	lsls	r3, r3, #1
 8000dc0:	4403      	add	r3, r0
 8000dc2:	00db      	lsls	r3, r3, #3
 8000dc4:	4413      	add	r3, r2
 8000dc6:	f103 0220 	add.w	r2, r3, #32
 8000dca:	6853      	ldr	r3, [r2, #4]
 8000dcc:	f361 0382 	bfi	r3, r1, #2, #1
 8000dd0:	6053      	str	r3, [r2, #4]
	// Set Flow Controller (When Memory-Memory it's set to 0 by hardware)
	LINE->S[config_obj->stream].CR.Bits.PFCTRL = config_obj->flow_controller;
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	7d5a      	ldrb	r2, [r3, #21]
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	781b      	ldrb	r3, [r3, #0]
 8000dda:	4618      	mov	r0, r3
 8000ddc:	4613      	mov	r3, r2
 8000dde:	f003 0301 	and.w	r3, r3, #1
 8000de2:	b2d9      	uxtb	r1, r3
 8000de4:	687a      	ldr	r2, [r7, #4]
 8000de6:	4603      	mov	r3, r0
 8000de8:	005b      	lsls	r3, r3, #1
 8000dea:	4403      	add	r3, r0
 8000dec:	00db      	lsls	r3, r3, #3
 8000dee:	4413      	add	r3, r2
 8000df0:	f103 0210 	add.w	r2, r3, #16
 8000df4:	6813      	ldr	r3, [r2, #0]
 8000df6:	f361 1345 	bfi	r3, r1, #5, #1
 8000dfa:	6013      	str	r3, [r2, #0]
	//	Set MSIZE and PSIZE, In Direct Mode they have to be equal
	if (config_obj->direct_mode == DIRECT_MODE_ENABLED)
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	7b9b      	ldrb	r3, [r3, #14]
 8000e00:	2b01      	cmp	r3, #1
 8000e02:	d130      	bne.n	8000e66 <DMA_Config+0x1e6>
	{
		if (config_obj->memory_size == config_obj->peripheral_size)
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	7c5a      	ldrb	r2, [r3, #17]
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	7c1b      	ldrb	r3, [r3, #16]
 8000e0c:	429a      	cmp	r2, r3
 8000e0e:	d169      	bne.n	8000ee4 <DMA_Config+0x264>
		{
			LINE->S[config_obj->stream].CR.Bits.MSIZE = config_obj->memory_size;
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	7c5a      	ldrb	r2, [r3, #17]
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	4618      	mov	r0, r3
 8000e1a:	4613      	mov	r3, r2
 8000e1c:	f003 0303 	and.w	r3, r3, #3
 8000e20:	b2d9      	uxtb	r1, r3
 8000e22:	687a      	ldr	r2, [r7, #4]
 8000e24:	4603      	mov	r3, r0
 8000e26:	005b      	lsls	r3, r3, #1
 8000e28:	4403      	add	r3, r0
 8000e2a:	00db      	lsls	r3, r3, #3
 8000e2c:	4413      	add	r3, r2
 8000e2e:	f103 0210 	add.w	r2, r3, #16
 8000e32:	6813      	ldr	r3, [r2, #0]
 8000e34:	f361 334e 	bfi	r3, r1, #13, #2
 8000e38:	6013      	str	r3, [r2, #0]
			LINE->S[config_obj->stream].CR.Bits.PSIZE = config_obj->peripheral_size;
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	7c1a      	ldrb	r2, [r3, #16]
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	781b      	ldrb	r3, [r3, #0]
 8000e42:	4618      	mov	r0, r3
 8000e44:	4613      	mov	r3, r2
 8000e46:	f003 0303 	and.w	r3, r3, #3
 8000e4a:	b2d9      	uxtb	r1, r3
 8000e4c:	687a      	ldr	r2, [r7, #4]
 8000e4e:	4603      	mov	r3, r0
 8000e50:	005b      	lsls	r3, r3, #1
 8000e52:	4403      	add	r3, r0
 8000e54:	00db      	lsls	r3, r3, #3
 8000e56:	4413      	add	r3, r2
 8000e58:	f103 0210 	add.w	r2, r3, #16
 8000e5c:	6813      	ldr	r3, [r2, #0]
 8000e5e:	f361 23cc 	bfi	r3, r1, #11, #2
 8000e62:	6013      	str	r3, [r2, #0]
 8000e64:	e03e      	b.n	8000ee4 <DMA_Config+0x264>
			//			Throw Error
		}
	}
	else
	{
		LINE->S[config_obj->stream].CR.Bits.MSIZE = config_obj->memory_size;
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	7c5a      	ldrb	r2, [r3, #17]
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	781b      	ldrb	r3, [r3, #0]
 8000e6e:	4618      	mov	r0, r3
 8000e70:	4613      	mov	r3, r2
 8000e72:	f003 0303 	and.w	r3, r3, #3
 8000e76:	b2d9      	uxtb	r1, r3
 8000e78:	687a      	ldr	r2, [r7, #4]
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	005b      	lsls	r3, r3, #1
 8000e7e:	4403      	add	r3, r0
 8000e80:	00db      	lsls	r3, r3, #3
 8000e82:	4413      	add	r3, r2
 8000e84:	f103 0210 	add.w	r2, r3, #16
 8000e88:	6813      	ldr	r3, [r2, #0]
 8000e8a:	f361 334e 	bfi	r3, r1, #13, #2
 8000e8e:	6013      	str	r3, [r2, #0]
		LINE->S[config_obj->stream].CR.Bits.PSIZE = config_obj->peripheral_size;
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	7c1a      	ldrb	r2, [r3, #16]
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	4618      	mov	r0, r3
 8000e9a:	4613      	mov	r3, r2
 8000e9c:	f003 0303 	and.w	r3, r3, #3
 8000ea0:	b2d9      	uxtb	r1, r3
 8000ea2:	687a      	ldr	r2, [r7, #4]
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	005b      	lsls	r3, r3, #1
 8000ea8:	4403      	add	r3, r0
 8000eaa:	00db      	lsls	r3, r3, #3
 8000eac:	4413      	add	r3, r2
 8000eae:	f103 0210 	add.w	r2, r3, #16
 8000eb2:	6813      	ldr	r3, [r2, #0]
 8000eb4:	f361 23cc 	bfi	r3, r1, #11, #2
 8000eb8:	6013      	str	r3, [r2, #0]
		// If FIFO selected, Set FIFO Threshold
		LINE->S[config_obj->stream].FCR.Bits.FTH = config_obj->fifo_threshold;
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	7bda      	ldrb	r2, [r3, #15]
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	781b      	ldrb	r3, [r3, #0]
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	4613      	mov	r3, r2
 8000ec6:	f003 0303 	and.w	r3, r3, #3
 8000eca:	b2d9      	uxtb	r1, r3
 8000ecc:	687a      	ldr	r2, [r7, #4]
 8000ece:	4603      	mov	r3, r0
 8000ed0:	005b      	lsls	r3, r3, #1
 8000ed2:	4403      	add	r3, r0
 8000ed4:	00db      	lsls	r3, r3, #3
 8000ed6:	4413      	add	r3, r2
 8000ed8:	f103 0220 	add.w	r2, r3, #32
 8000edc:	6853      	ldr	r3, [r2, #4]
 8000ede:	f361 0301 	bfi	r3, r1, #0, #2
 8000ee2:	6053      	str	r3, [r2, #4]
	}
	// Set Peripheral and Memory Increment Mode
	LINE->S[config_obj->stream].CR.Bits.PINC = config_obj->peripheral_increment_mode;
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	7c9a      	ldrb	r2, [r3, #18]
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	4618      	mov	r0, r3
 8000eee:	4613      	mov	r3, r2
 8000ef0:	f003 0301 	and.w	r3, r3, #1
 8000ef4:	b2d9      	uxtb	r1, r3
 8000ef6:	687a      	ldr	r2, [r7, #4]
 8000ef8:	4603      	mov	r3, r0
 8000efa:	005b      	lsls	r3, r3, #1
 8000efc:	4403      	add	r3, r0
 8000efe:	00db      	lsls	r3, r3, #3
 8000f00:	4413      	add	r3, r2
 8000f02:	f103 0210 	add.w	r2, r3, #16
 8000f06:	6813      	ldr	r3, [r2, #0]
 8000f08:	f361 2349 	bfi	r3, r1, #9, #1
 8000f0c:	6013      	str	r3, [r2, #0]
	LINE->S[config_obj->stream].CR.Bits.MINC = config_obj->memory_increment_mode;
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	7cda      	ldrb	r2, [r3, #19]
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	781b      	ldrb	r3, [r3, #0]
 8000f16:	4618      	mov	r0, r3
 8000f18:	4613      	mov	r3, r2
 8000f1a:	f003 0301 	and.w	r3, r3, #1
 8000f1e:	b2d9      	uxtb	r1, r3
 8000f20:	687a      	ldr	r2, [r7, #4]
 8000f22:	4603      	mov	r3, r0
 8000f24:	005b      	lsls	r3, r3, #1
 8000f26:	4403      	add	r3, r0
 8000f28:	00db      	lsls	r3, r3, #3
 8000f2a:	4413      	add	r3, r2
 8000f2c:	f103 0210 	add.w	r2, r3, #16
 8000f30:	6813      	ldr	r3, [r2, #0]
 8000f32:	f361 238a 	bfi	r3, r1, #10, #1
 8000f36:	6013      	str	r3, [r2, #0]
	LINE->S[config_obj->stream].CR.Bits.PINCOS = config_obj->peripheral_increment_offset;
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	7d1a      	ldrb	r2, [r3, #20]
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	4618      	mov	r0, r3
 8000f42:	4613      	mov	r3, r2
 8000f44:	f003 0301 	and.w	r3, r3, #1
 8000f48:	b2d9      	uxtb	r1, r3
 8000f4a:	687a      	ldr	r2, [r7, #4]
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	005b      	lsls	r3, r3, #1
 8000f50:	4403      	add	r3, r0
 8000f52:	00db      	lsls	r3, r3, #3
 8000f54:	4413      	add	r3, r2
 8000f56:	f103 0210 	add.w	r2, r3, #16
 8000f5a:	6813      	ldr	r3, [r2, #0]
 8000f5c:	f361 33cf 	bfi	r3, r1, #15, #1
 8000f60:	6013      	str	r3, [r2, #0]

	// Set Peripheral and Memory Burst Transfer Configuration
	LINE->S[config_obj->stream].CR.Bits.MBURST = config_obj->memory_transfer_type;
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	7dda      	ldrb	r2, [r3, #23]
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	4613      	mov	r3, r2
 8000f6e:	f003 0303 	and.w	r3, r3, #3
 8000f72:	b2d9      	uxtb	r1, r3
 8000f74:	687a      	ldr	r2, [r7, #4]
 8000f76:	4603      	mov	r3, r0
 8000f78:	005b      	lsls	r3, r3, #1
 8000f7a:	4403      	add	r3, r0
 8000f7c:	00db      	lsls	r3, r3, #3
 8000f7e:	4413      	add	r3, r2
 8000f80:	f103 0210 	add.w	r2, r3, #16
 8000f84:	6813      	ldr	r3, [r2, #0]
 8000f86:	f361 53d8 	bfi	r3, r1, #23, #2
 8000f8a:	6013      	str	r3, [r2, #0]
	LINE->S[config_obj->stream].CR.Bits.PBURST = config_obj->peripheral_transfer_type;
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	7d9a      	ldrb	r2, [r3, #22]
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	4618      	mov	r0, r3
 8000f96:	4613      	mov	r3, r2
 8000f98:	f003 0303 	and.w	r3, r3, #3
 8000f9c:	b2d9      	uxtb	r1, r3
 8000f9e:	687a      	ldr	r2, [r7, #4]
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	005b      	lsls	r3, r3, #1
 8000fa4:	4403      	add	r3, r0
 8000fa6:	00db      	lsls	r3, r3, #3
 8000fa8:	4413      	add	r3, r2
 8000faa:	f103 0210 	add.w	r2, r3, #16
 8000fae:	6813      	ldr	r3, [r2, #0]
 8000fb0:	f361 5356 	bfi	r3, r1, #21, #2
 8000fb4:	6013      	str	r3, [r2, #0]

	//	Finally Enabling Interrupts
	LINE->S[config_obj->stream].CR.Bits.DMEIE = config_obj->direct_mode_error_interrupt;
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	7f1a      	ldrb	r2, [r3, #28]
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	4613      	mov	r3, r2
 8000fc2:	f003 0301 	and.w	r3, r3, #1
 8000fc6:	b2d9      	uxtb	r1, r3
 8000fc8:	687a      	ldr	r2, [r7, #4]
 8000fca:	4603      	mov	r3, r0
 8000fcc:	005b      	lsls	r3, r3, #1
 8000fce:	4403      	add	r3, r0
 8000fd0:	00db      	lsls	r3, r3, #3
 8000fd2:	4413      	add	r3, r2
 8000fd4:	f103 0210 	add.w	r2, r3, #16
 8000fd8:	6813      	ldr	r3, [r2, #0]
 8000fda:	f361 0341 	bfi	r3, r1, #1, #1
 8000fde:	6013      	str	r3, [r2, #0]
	LINE->S[config_obj->stream].CR.Bits.TCIE = config_obj->transfer_complete_interrupt;
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	7e1a      	ldrb	r2, [r3, #24]
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	4618      	mov	r0, r3
 8000fea:	4613      	mov	r3, r2
 8000fec:	f003 0301 	and.w	r3, r3, #1
 8000ff0:	b2d9      	uxtb	r1, r3
 8000ff2:	687a      	ldr	r2, [r7, #4]
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	005b      	lsls	r3, r3, #1
 8000ff8:	4403      	add	r3, r0
 8000ffa:	00db      	lsls	r3, r3, #3
 8000ffc:	4413      	add	r3, r2
 8000ffe:	f103 0210 	add.w	r2, r3, #16
 8001002:	6813      	ldr	r3, [r2, #0]
 8001004:	f361 1304 	bfi	r3, r1, #4, #1
 8001008:	6013      	str	r3, [r2, #0]
	LINE->S[config_obj->stream].CR.Bits.HTIE = config_obj->half_transfer_interrupt;
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	7e5a      	ldrb	r2, [r3, #25]
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	781b      	ldrb	r3, [r3, #0]
 8001012:	4618      	mov	r0, r3
 8001014:	4613      	mov	r3, r2
 8001016:	f003 0301 	and.w	r3, r3, #1
 800101a:	b2d9      	uxtb	r1, r3
 800101c:	687a      	ldr	r2, [r7, #4]
 800101e:	4603      	mov	r3, r0
 8001020:	005b      	lsls	r3, r3, #1
 8001022:	4403      	add	r3, r0
 8001024:	00db      	lsls	r3, r3, #3
 8001026:	4413      	add	r3, r2
 8001028:	f103 0210 	add.w	r2, r3, #16
 800102c:	6813      	ldr	r3, [r2, #0]
 800102e:	f361 03c3 	bfi	r3, r1, #3, #1
 8001032:	6013      	str	r3, [r2, #0]
	LINE->S[config_obj->stream].CR.Bits.TEIE = config_obj->transfer_error_interrupt;
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	7eda      	ldrb	r2, [r3, #27]
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	4618      	mov	r0, r3
 800103e:	4613      	mov	r3, r2
 8001040:	f003 0301 	and.w	r3, r3, #1
 8001044:	b2d9      	uxtb	r1, r3
 8001046:	687a      	ldr	r2, [r7, #4]
 8001048:	4603      	mov	r3, r0
 800104a:	005b      	lsls	r3, r3, #1
 800104c:	4403      	add	r3, r0
 800104e:	00db      	lsls	r3, r3, #3
 8001050:	4413      	add	r3, r2
 8001052:	f103 0210 	add.w	r2, r3, #16
 8001056:	6813      	ldr	r3, [r2, #0]
 8001058:	f361 0382 	bfi	r3, r1, #2, #1
 800105c:	6013      	str	r3, [r2, #0]
	LINE->S[config_obj->stream].FCR.Bits.FEIE = config_obj->fifo_error_interrupt;
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	7e9a      	ldrb	r2, [r3, #26]
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	4618      	mov	r0, r3
 8001068:	4613      	mov	r3, r2
 800106a:	f003 0301 	and.w	r3, r3, #1
 800106e:	b2d9      	uxtb	r1, r3
 8001070:	687a      	ldr	r2, [r7, #4]
 8001072:	4603      	mov	r3, r0
 8001074:	005b      	lsls	r3, r3, #1
 8001076:	4403      	add	r3, r0
 8001078:	00db      	lsls	r3, r3, #3
 800107a:	4413      	add	r3, r2
 800107c:	f103 0220 	add.w	r2, r3, #32
 8001080:	6853      	ldr	r3, [r2, #4]
 8001082:	f361 13c7 	bfi	r3, r1, #7, #1
 8001086:	6053      	str	r3, [r2, #4]
}
 8001088:	bf00      	nop
 800108a:	3708      	adds	r7, #8
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}

08001090 <DMA_BeginTransport>:

void DMA_BeginTransport(DMA_Registers *LINE, DMA_InitializationObject *config_obj)
{
 8001090:	b480      	push	{r7}
 8001092:	b083      	sub	sp, #12
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
 8001098:	6039      	str	r1, [r7, #0]
	LINE->S[config_obj->stream].CR.Bits.EN = 1;
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	4619      	mov	r1, r3
 80010a0:	687a      	ldr	r2, [r7, #4]
 80010a2:	460b      	mov	r3, r1
 80010a4:	005b      	lsls	r3, r3, #1
 80010a6:	440b      	add	r3, r1
 80010a8:	00db      	lsls	r3, r3, #3
 80010aa:	4413      	add	r3, r2
 80010ac:	f103 0210 	add.w	r2, r3, #16
 80010b0:	6813      	ldr	r3, [r2, #0]
 80010b2:	f043 0301 	orr.w	r3, r3, #1
 80010b6:	6013      	str	r3, [r2, #0]
}
 80010b8:	bf00      	nop
 80010ba:	370c      	adds	r7, #12
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr

080010c4 <DMA_GET_Transfer_State>:

DMA_Transfer_States *DMA_GET_Transfer_State(DMA_Registers *LINE, const DMA_STREAM stream)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b084      	sub	sp, #16
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
 80010cc:	460b      	mov	r3, r1
 80010ce:	70fb      	strb	r3, [r7, #3]
	uint32 interrupts = _Get_Interrupt_Bits(stream) & LINE->ISR[stream / 4];
 80010d0:	78fb      	ldrb	r3, [r7, #3]
 80010d2:	4618      	mov	r0, r3
 80010d4:	f7ff fd0c 	bl	8000af0 <_Get_Interrupt_Bits>
 80010d8:	4602      	mov	r2, r0
 80010da:	78fb      	ldrb	r3, [r7, #3]
 80010dc:	089b      	lsrs	r3, r3, #2
 80010de:	b2db      	uxtb	r3, r3
 80010e0:	4619      	mov	r1, r3
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80010e8:	4013      	ands	r3, r2
 80010ea:	60fb      	str	r3, [r7, #12]
	switch (stream)
 80010ec:	78fb      	ldrb	r3, [r7, #3]
 80010ee:	2b07      	cmp	r3, #7
 80010f0:	d81e      	bhi.n	8001130 <DMA_GET_Transfer_State+0x6c>
 80010f2:	a201      	add	r2, pc, #4	; (adr r2, 80010f8 <DMA_GET_Transfer_State+0x34>)
 80010f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010f8:	08001131 	.word	0x08001131
 80010fc:	08001119 	.word	0x08001119
 8001100:	08001121 	.word	0x08001121
 8001104:	08001129 	.word	0x08001129
 8001108:	08001131 	.word	0x08001131
 800110c:	08001119 	.word	0x08001119
 8001110:	08001121 	.word	0x08001121
 8001114:	08001129 	.word	0x08001129
	case STREAM0:
	case STREAM4:
		break;
	case STREAM1:
	case STREAM5:
		interrupts >>= 6;
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	099b      	lsrs	r3, r3, #6
 800111c:	60fb      	str	r3, [r7, #12]
		break;
 800111e:	e007      	b.n	8001130 <DMA_GET_Transfer_State+0x6c>
	case STREAM2:
	case STREAM6:
		interrupts >>= 16;
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	0c1b      	lsrs	r3, r3, #16
 8001124:	60fb      	str	r3, [r7, #12]
		break;
 8001126:	e003      	b.n	8001130 <DMA_GET_Transfer_State+0x6c>
	case STREAM3:
	case STREAM7:
		interrupts >>= 22;
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	0d9b      	lsrs	r3, r3, #22
 800112c:	60fb      	str	r3, [r7, #12]
		break;
 800112e:	bf00      	nop
	}

	interrupt_states.flags.FIFOError = (interrupts >> 0) & 0x01;
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	f003 0301 	and.w	r3, r3, #1
 8001136:	b2d9      	uxtb	r1, r3
 8001138:	4a18      	ldr	r2, [pc, #96]	; (800119c <DMA_GET_Transfer_State+0xd8>)
 800113a:	7813      	ldrb	r3, [r2, #0]
 800113c:	f361 0300 	bfi	r3, r1, #0, #1
 8001140:	7013      	strb	r3, [r2, #0]
	interrupt_states.flags.DirectModeError = (interrupts >> 2) & 0x01;
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	089b      	lsrs	r3, r3, #2
 8001146:	f003 0301 	and.w	r3, r3, #1
 800114a:	b2d9      	uxtb	r1, r3
 800114c:	4a13      	ldr	r2, [pc, #76]	; (800119c <DMA_GET_Transfer_State+0xd8>)
 800114e:	7813      	ldrb	r3, [r2, #0]
 8001150:	f361 0341 	bfi	r3, r1, #1, #1
 8001154:	7013      	strb	r3, [r2, #0]
	interrupt_states.flags.TransferError = (interrupts >> 3) & 0x01;
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	08db      	lsrs	r3, r3, #3
 800115a:	f003 0301 	and.w	r3, r3, #1
 800115e:	b2d9      	uxtb	r1, r3
 8001160:	4a0e      	ldr	r2, [pc, #56]	; (800119c <DMA_GET_Transfer_State+0xd8>)
 8001162:	7813      	ldrb	r3, [r2, #0]
 8001164:	f361 0382 	bfi	r3, r1, #2, #1
 8001168:	7013      	strb	r3, [r2, #0]
	interrupt_states.flags.HalfTransfer = (interrupts >> 4) & 0x01;
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	091b      	lsrs	r3, r3, #4
 800116e:	f003 0301 	and.w	r3, r3, #1
 8001172:	b2d9      	uxtb	r1, r3
 8001174:	4a09      	ldr	r2, [pc, #36]	; (800119c <DMA_GET_Transfer_State+0xd8>)
 8001176:	7813      	ldrb	r3, [r2, #0]
 8001178:	f361 03c3 	bfi	r3, r1, #3, #1
 800117c:	7013      	strb	r3, [r2, #0]
	interrupt_states.flags.TransferComplete = (interrupts >> 5) & 0x01;
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	095b      	lsrs	r3, r3, #5
 8001182:	f003 0301 	and.w	r3, r3, #1
 8001186:	b2d9      	uxtb	r1, r3
 8001188:	4a04      	ldr	r2, [pc, #16]	; (800119c <DMA_GET_Transfer_State+0xd8>)
 800118a:	7813      	ldrb	r3, [r2, #0]
 800118c:	f361 1304 	bfi	r3, r1, #4, #1
 8001190:	7013      	strb	r3, [r2, #0]

	return &interrupt_states;
 8001192:	4b02      	ldr	r3, [pc, #8]	; (800119c <DMA_GET_Transfer_State+0xd8>)
}
 8001194:	4618      	mov	r0, r3
 8001196:	3710      	adds	r7, #16
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	20000088 	.word	0x20000088

080011a0 <DMA2_Stream0_IRQHandler>:

void DMA2_Stream0_IRQHandler(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
	DMA_Interrupts_Callout_Notification();
 80011a4:	f000 faa0 	bl	80016e8 <DMA_Interrupts_Callout_Notification>
}
 80011a8:	bf00      	nop
 80011aa:	bd80      	pop	{r7, pc}

080011ac <GPIO_EnableClock>:
 */

#include "GPIO.h"

void GPIO_EnableClock(uint8 PortName)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b083      	sub	sp, #12
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	4603      	mov	r3, r0
 80011b4:	71fb      	strb	r3, [r7, #7]
	*RCC_AHB1ENR |= (0x01 << PortName);
 80011b6:	4b08      	ldr	r3, [pc, #32]	; (80011d8 <GPIO_EnableClock+0x2c>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	79fa      	ldrb	r2, [r7, #7]
 80011bc:	2101      	movs	r1, #1
 80011be:	fa01 f202 	lsl.w	r2, r1, r2
 80011c2:	4611      	mov	r1, r2
 80011c4:	4a04      	ldr	r2, [pc, #16]	; (80011d8 <GPIO_EnableClock+0x2c>)
 80011c6:	430b      	orrs	r3, r1
 80011c8:	6013      	str	r3, [r2, #0]
}
 80011ca:	bf00      	nop
 80011cc:	370c      	adds	r7, #12
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr
 80011d6:	bf00      	nop
 80011d8:	40023830 	.word	0x40023830

080011dc <GPIO_Init>:

void GPIO_Init(uint32 PortName, uint8 PinNum, uint8 PinMode,
		uint8 DefaultState)
{
 80011dc:	b480      	push	{r7}
 80011de:	b083      	sub	sp, #12
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
 80011e4:	4608      	mov	r0, r1
 80011e6:	4611      	mov	r1, r2
 80011e8:	461a      	mov	r2, r3
 80011ea:	4603      	mov	r3, r0
 80011ec:	70fb      	strb	r3, [r7, #3]
 80011ee:	460b      	mov	r3, r1
 80011f0:	70bb      	strb	r3, [r7, #2]
 80011f2:	4613      	mov	r3, r2
 80011f4:	707b      	strb	r3, [r7, #1]

  // Configure moder register for pin direction
	*GPIOx_MODER(PortName) &= ~(0x03 << 2 * PinNum);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681a      	ldr	r2, [r3, #0]
 80011fa:	78fb      	ldrb	r3, [r7, #3]
 80011fc:	005b      	lsls	r3, r3, #1
 80011fe:	2103      	movs	r1, #3
 8001200:	fa01 f303 	lsl.w	r3, r1, r3
 8001204:	43db      	mvns	r3, r3
 8001206:	4619      	mov	r1, r3
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	400a      	ands	r2, r1
 800120c:	601a      	str	r2, [r3, #0]
	*GPIOx_MODER(PortName) |= PinMode << 2 * PinNum;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681a      	ldr	r2, [r3, #0]
 8001212:	78b9      	ldrb	r1, [r7, #2]
 8001214:	78fb      	ldrb	r3, [r7, #3]
 8001216:	005b      	lsls	r3, r3, #1
 8001218:	fa01 f303 	lsl.w	r3, r1, r3
 800121c:	4619      	mov	r1, r3
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	430a      	orrs	r2, r1
 8001222:	601a      	str	r2, [r3, #0]

	*GPIOx_OTYPER(PortName) &= ~(1 << PinNum);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	3304      	adds	r3, #4
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	78fa      	ldrb	r2, [r7, #3]
 800122c:	2101      	movs	r1, #1
 800122e:	fa01 f202 	lsl.w	r2, r1, r2
 8001232:	43d2      	mvns	r2, r2
 8001234:	4611      	mov	r1, r2
 8001236:	687a      	ldr	r2, [r7, #4]
 8001238:	3204      	adds	r2, #4
 800123a:	400b      	ands	r3, r1
 800123c:	6013      	str	r3, [r2, #0]
	*GPIOx_OTYPER(PortName) |= ((DefaultState & _OUTTYPE_MASK) >> _OUTTYPE_SHIFT) << PinNum;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	3304      	adds	r3, #4
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	787a      	ldrb	r2, [r7, #1]
 8001246:	f002 0101 	and.w	r1, r2, #1
 800124a:	78fa      	ldrb	r2, [r7, #3]
 800124c:	fa01 f202 	lsl.w	r2, r1, r2
 8001250:	4611      	mov	r1, r2
 8001252:	687a      	ldr	r2, [r7, #4]
 8001254:	3204      	adds	r2, #4
 8001256:	430b      	orrs	r3, r1
 8001258:	6013      	str	r3, [r2, #0]

	*GPIOx_PUPDR(PortName) &= ~(0x03 << 2 * PinNum);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	330c      	adds	r3, #12
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	78fa      	ldrb	r2, [r7, #3]
 8001262:	0052      	lsls	r2, r2, #1
 8001264:	2103      	movs	r1, #3
 8001266:	fa01 f202 	lsl.w	r2, r1, r2
 800126a:	43d2      	mvns	r2, r2
 800126c:	4611      	mov	r1, r2
 800126e:	687a      	ldr	r2, [r7, #4]
 8001270:	320c      	adds	r2, #12
 8001272:	400b      	ands	r3, r1
 8001274:	6013      	str	r3, [r2, #0]
	*GPIOx_PUPDR(PortName) |= ((DefaultState & _PUPD_MASK) >> _PUPD_SHIFT) << (2 * PinNum);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	330c      	adds	r3, #12
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	787a      	ldrb	r2, [r7, #1]
 800127e:	1052      	asrs	r2, r2, #1
 8001280:	f002 0103 	and.w	r1, r2, #3
 8001284:	78fa      	ldrb	r2, [r7, #3]
 8001286:	0052      	lsls	r2, r2, #1
 8001288:	fa01 f202 	lsl.w	r2, r1, r2
 800128c:	4611      	mov	r1, r2
 800128e:	687a      	ldr	r2, [r7, #4]
 8001290:	320c      	adds	r2, #12
 8001292:	430b      	orrs	r3, r1
 8001294:	6013      	str	r3, [r2, #0]
}
 8001296:	bf00      	nop
 8001298:	370c      	adds	r7, #12
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr

080012a2 <GPIO_WritePin>:

uint8 GPIO_WritePin(uint32 PortName, uint8 PinNum,
		uint8 Data)
{
 80012a2:	b480      	push	{r7}
 80012a4:	b085      	sub	sp, #20
 80012a6:	af00      	add	r7, sp, #0
 80012a8:	6078      	str	r0, [r7, #4]
 80012aa:	460b      	mov	r3, r1
 80012ac:	70fb      	strb	r3, [r7, #3]
 80012ae:	4613      	mov	r3, r2
 80012b0:	70bb      	strb	r3, [r7, #2]
	uint8 result;
  if (((*GPIOx_MODER(PortName) & (0x03 << 2 * PinNum)) >> (2 * PinNum)) == 1)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	78fa      	ldrb	r2, [r7, #3]
 80012b8:	0052      	lsls	r2, r2, #1
 80012ba:	2103      	movs	r1, #3
 80012bc:	fa01 f202 	lsl.w	r2, r1, r2
 80012c0:	401a      	ands	r2, r3
 80012c2:	78fb      	ldrb	r3, [r7, #3]
 80012c4:	005b      	lsls	r3, r3, #1
 80012c6:	fa22 f303 	lsr.w	r3, r2, r3
 80012ca:	2b01      	cmp	r3, #1
 80012cc:	d11f      	bne.n	800130e <GPIO_WritePin+0x6c>
  {
    if (Data)
 80012ce:	78bb      	ldrb	r3, [r7, #2]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d00c      	beq.n	80012ee <GPIO_WritePin+0x4c>
    {
      *GPIOx_ODR(PortName) |= (1 << PinNum);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	3314      	adds	r3, #20
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	78fa      	ldrb	r2, [r7, #3]
 80012dc:	2101      	movs	r1, #1
 80012de:	fa01 f202 	lsl.w	r2, r1, r2
 80012e2:	4611      	mov	r1, r2
 80012e4:	687a      	ldr	r2, [r7, #4]
 80012e6:	3214      	adds	r2, #20
 80012e8:	430b      	orrs	r3, r1
 80012ea:	6013      	str	r3, [r2, #0]
 80012ec:	e00c      	b.n	8001308 <GPIO_WritePin+0x66>
    }
    else
    {
      *GPIOx_ODR(PortName) &= ~(1 << PinNum);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	3314      	adds	r3, #20
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	78fa      	ldrb	r2, [r7, #3]
 80012f6:	2101      	movs	r1, #1
 80012f8:	fa01 f202 	lsl.w	r2, r1, r2
 80012fc:	43d2      	mvns	r2, r2
 80012fe:	4611      	mov	r1, r2
 8001300:	687a      	ldr	r2, [r7, #4]
 8001302:	3214      	adds	r2, #20
 8001304:	400b      	ands	r3, r1
 8001306:	6013      	str	r3, [r2, #0]
    }
    result = OK;
 8001308:	2300      	movs	r3, #0
 800130a:	73fb      	strb	r3, [r7, #15]
 800130c:	e001      	b.n	8001312 <GPIO_WritePin+0x70>
  }
  else
  {
    result = NOK;
 800130e:	2301      	movs	r3, #1
 8001310:	73fb      	strb	r3, [r7, #15]
  }

  return result;
 8001312:	7bfb      	ldrb	r3, [r7, #15]
}
 8001314:	4618      	mov	r0, r3
 8001316:	3714      	adds	r7, #20
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr

08001320 <Enable_NVIC>:
 */

#include "NVIC.h"

void Enable_NVIC(uint32 reg, uint32 bit)
{
 8001320:	b480      	push	{r7}
 8001322:	b083      	sub	sp, #12
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
 8001328:	6039      	str	r1, [r7, #0]
	SETBIT(*NVIC_ISERx(reg), bit);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	f103 2338 	add.w	r3, r3, #939538432	; 0x38003800
 8001330:	3340      	adds	r3, #64	; 0x40
 8001332:	009b      	lsls	r3, r3, #2
 8001334:	681a      	ldr	r2, [r3, #0]
 8001336:	2101      	movs	r1, #1
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	fa01 f303 	lsl.w	r3, r1, r3
 800133e:	4618      	mov	r0, r3
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	f103 2338 	add.w	r3, r3, #939538432	; 0x38003800
 8001346:	3340      	adds	r3, #64	; 0x40
 8001348:	009b      	lsls	r3, r3, #2
 800134a:	4619      	mov	r1, r3
 800134c:	ea42 0300 	orr.w	r3, r2, r0
 8001350:	600b      	str	r3, [r1, #0]
}
 8001352:	bf00      	nop
 8001354:	370c      	adds	r7, #12
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr
	...

08001360 <transmission_started>:
uint32 src[100];
uint32 dest[100];
uint8 transmiting = 1;

void transmission_started()
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
	while (transmiting)
 8001366:	e01d      	b.n	80013a4 <transmission_started+0x44>
	{
		GPIO_WritePin(GPIOA, 0, 1);
 8001368:	2201      	movs	r2, #1
 800136a:	2100      	movs	r1, #0
 800136c:	4812      	ldr	r0, [pc, #72]	; (80013b8 <transmission_started+0x58>)
 800136e:	f7ff ff98 	bl	80012a2 <GPIO_WritePin>
		for (int i = 0; i < 300000; i++)
 8001372:	2300      	movs	r3, #0
 8001374:	607b      	str	r3, [r7, #4]
 8001376:	e002      	b.n	800137e <transmission_started+0x1e>
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	3301      	adds	r3, #1
 800137c:	607b      	str	r3, [r7, #4]
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	4a0e      	ldr	r2, [pc, #56]	; (80013bc <transmission_started+0x5c>)
 8001382:	4293      	cmp	r3, r2
 8001384:	ddf8      	ble.n	8001378 <transmission_started+0x18>
			;
		GPIO_WritePin(GPIOA, 0, 0);
 8001386:	2200      	movs	r2, #0
 8001388:	2100      	movs	r1, #0
 800138a:	480b      	ldr	r0, [pc, #44]	; (80013b8 <transmission_started+0x58>)
 800138c:	f7ff ff89 	bl	80012a2 <GPIO_WritePin>
		for (int i = 0; i < 300000; i++)
 8001390:	2300      	movs	r3, #0
 8001392:	603b      	str	r3, [r7, #0]
 8001394:	e002      	b.n	800139c <transmission_started+0x3c>
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	3301      	adds	r3, #1
 800139a:	603b      	str	r3, [r7, #0]
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	4a07      	ldr	r2, [pc, #28]	; (80013bc <transmission_started+0x5c>)
 80013a0:	4293      	cmp	r3, r2
 80013a2:	ddf8      	ble.n	8001396 <transmission_started+0x36>
	while (transmiting)
 80013a4:	4b06      	ldr	r3, [pc, #24]	; (80013c0 <transmission_started+0x60>)
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d1dd      	bne.n	8001368 <transmission_started+0x8>
			;
	}
}
 80013ac:	bf00      	nop
 80013ae:	bf00      	nop
 80013b0:	3708      	adds	r7, #8
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	40020000 	.word	0x40020000
 80013bc:	000493df 	.word	0x000493df
 80013c0:	20000000 	.word	0x20000000

080013c4 <transmission_ended>:

void transmission_ended()
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0
	GPIO_WritePin(GPIOA, 0, 0);
 80013ca:	2200      	movs	r2, #0
 80013cc:	2100      	movs	r1, #0
 80013ce:	4817      	ldr	r0, [pc, #92]	; (800142c <transmission_ended+0x68>)
 80013d0:	f7ff ff67 	bl	80012a2 <GPIO_WritePin>
	GPIO_WritePin(GPIOA, 1, 1);
 80013d4:	2201      	movs	r2, #1
 80013d6:	2101      	movs	r1, #1
 80013d8:	4814      	ldr	r0, [pc, #80]	; (800142c <transmission_ended+0x68>)
 80013da:	f7ff ff62 	bl	80012a2 <GPIO_WritePin>
	GPIO_WritePin(GPIOA, 2, 0);
 80013de:	2200      	movs	r2, #0
 80013e0:	2102      	movs	r1, #2
 80013e2:	4812      	ldr	r0, [pc, #72]	; (800142c <transmission_ended+0x68>)
 80013e4:	f7ff ff5d 	bl	80012a2 <GPIO_WritePin>
	GPIO_WritePin(GPIOA, 3, 0);
 80013e8:	2200      	movs	r2, #0
 80013ea:	2103      	movs	r1, #3
 80013ec:	480f      	ldr	r0, [pc, #60]	; (800142c <transmission_ended+0x68>)
 80013ee:	f7ff ff58 	bl	80012a2 <GPIO_WritePin>
	GPIO_WritePin(GPIOA, 4, 0);
 80013f2:	2200      	movs	r2, #0
 80013f4:	2104      	movs	r1, #4
 80013f6:	480d      	ldr	r0, [pc, #52]	; (800142c <transmission_ended+0x68>)
 80013f8:	f7ff ff53 	bl	80012a2 <GPIO_WritePin>
	GPIO_WritePin(GPIOA, 5, 0);
 80013fc:	2200      	movs	r2, #0
 80013fe:	2105      	movs	r1, #5
 8001400:	480a      	ldr	r0, [pc, #40]	; (800142c <transmission_ended+0x68>)
 8001402:	f7ff ff4e 	bl	80012a2 <GPIO_WritePin>
	for (int i = 0; i < 1000000; i++)
 8001406:	2300      	movs	r3, #0
 8001408:	607b      	str	r3, [r7, #4]
 800140a:	e002      	b.n	8001412 <transmission_ended+0x4e>
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	3301      	adds	r3, #1
 8001410:	607b      	str	r3, [r7, #4]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	4a06      	ldr	r2, [pc, #24]	; (8001430 <transmission_ended+0x6c>)
 8001416:	4293      	cmp	r3, r2
 8001418:	ddf8      	ble.n	800140c <transmission_ended+0x48>
		;
	GPIO_WritePin(GPIOA, 1, 0);
 800141a:	2200      	movs	r2, #0
 800141c:	2101      	movs	r1, #1
 800141e:	4803      	ldr	r0, [pc, #12]	; (800142c <transmission_ended+0x68>)
 8001420:	f7ff ff3f 	bl	80012a2 <GPIO_WritePin>
}
 8001424:	bf00      	nop
 8001426:	3708      	adds	r7, #8
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	40020000 	.word	0x40020000
 8001430:	000f423f 	.word	0x000f423f

08001434 <data_integrity_error>:

void data_integrity_error()
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
	GPIO_WritePin(GPIOA, 0, 0);
 800143a:	2200      	movs	r2, #0
 800143c:	2100      	movs	r1, #0
 800143e:	4817      	ldr	r0, [pc, #92]	; (800149c <data_integrity_error+0x68>)
 8001440:	f7ff ff2f 	bl	80012a2 <GPIO_WritePin>
	GPIO_WritePin(GPIOA, 1, 0);
 8001444:	2200      	movs	r2, #0
 8001446:	2101      	movs	r1, #1
 8001448:	4814      	ldr	r0, [pc, #80]	; (800149c <data_integrity_error+0x68>)
 800144a:	f7ff ff2a 	bl	80012a2 <GPIO_WritePin>
	GPIO_WritePin(GPIOA, 2, 0);
 800144e:	2200      	movs	r2, #0
 8001450:	2102      	movs	r1, #2
 8001452:	4812      	ldr	r0, [pc, #72]	; (800149c <data_integrity_error+0x68>)
 8001454:	f7ff ff25 	bl	80012a2 <GPIO_WritePin>
	GPIO_WritePin(GPIOA, 3, 1);
 8001458:	2201      	movs	r2, #1
 800145a:	2103      	movs	r1, #3
 800145c:	480f      	ldr	r0, [pc, #60]	; (800149c <data_integrity_error+0x68>)
 800145e:	f7ff ff20 	bl	80012a2 <GPIO_WritePin>
	GPIO_WritePin(GPIOA, 4, 0);
 8001462:	2200      	movs	r2, #0
 8001464:	2104      	movs	r1, #4
 8001466:	480d      	ldr	r0, [pc, #52]	; (800149c <data_integrity_error+0x68>)
 8001468:	f7ff ff1b 	bl	80012a2 <GPIO_WritePin>
	GPIO_WritePin(GPIOA, 5, 0);
 800146c:	2200      	movs	r2, #0
 800146e:	2105      	movs	r1, #5
 8001470:	480a      	ldr	r0, [pc, #40]	; (800149c <data_integrity_error+0x68>)
 8001472:	f7ff ff16 	bl	80012a2 <GPIO_WritePin>
	for (int i = 0; i < 1000000; i++)
 8001476:	2300      	movs	r3, #0
 8001478:	607b      	str	r3, [r7, #4]
 800147a:	e002      	b.n	8001482 <data_integrity_error+0x4e>
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	3301      	adds	r3, #1
 8001480:	607b      	str	r3, [r7, #4]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	4a06      	ldr	r2, [pc, #24]	; (80014a0 <data_integrity_error+0x6c>)
 8001486:	4293      	cmp	r3, r2
 8001488:	ddf8      	ble.n	800147c <data_integrity_error+0x48>
		;
	GPIO_WritePin(GPIOA, 3, 0);
 800148a:	2200      	movs	r2, #0
 800148c:	2103      	movs	r1, #3
 800148e:	4803      	ldr	r0, [pc, #12]	; (800149c <data_integrity_error+0x68>)
 8001490:	f7ff ff07 	bl	80012a2 <GPIO_WritePin>
}
 8001494:	bf00      	nop
 8001496:	3708      	adds	r7, #8
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	40020000 	.word	0x40020000
 80014a0:	000f423f 	.word	0x000f423f

080014a4 <transmission_error>:

void transmission_error()
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
	GPIO_WritePin(GPIOA, 0, 0);
 80014aa:	2200      	movs	r2, #0
 80014ac:	2100      	movs	r1, #0
 80014ae:	4817      	ldr	r0, [pc, #92]	; (800150c <transmission_error+0x68>)
 80014b0:	f7ff fef7 	bl	80012a2 <GPIO_WritePin>
	GPIO_WritePin(GPIOA, 1, 0);
 80014b4:	2200      	movs	r2, #0
 80014b6:	2101      	movs	r1, #1
 80014b8:	4814      	ldr	r0, [pc, #80]	; (800150c <transmission_error+0x68>)
 80014ba:	f7ff fef2 	bl	80012a2 <GPIO_WritePin>
	GPIO_WritePin(GPIOA, 2, 1);
 80014be:	2201      	movs	r2, #1
 80014c0:	2102      	movs	r1, #2
 80014c2:	4812      	ldr	r0, [pc, #72]	; (800150c <transmission_error+0x68>)
 80014c4:	f7ff feed 	bl	80012a2 <GPIO_WritePin>
	GPIO_WritePin(GPIOA, 3, 0);
 80014c8:	2200      	movs	r2, #0
 80014ca:	2103      	movs	r1, #3
 80014cc:	480f      	ldr	r0, [pc, #60]	; (800150c <transmission_error+0x68>)
 80014ce:	f7ff fee8 	bl	80012a2 <GPIO_WritePin>
	GPIO_WritePin(GPIOA, 4, 0);
 80014d2:	2200      	movs	r2, #0
 80014d4:	2104      	movs	r1, #4
 80014d6:	480d      	ldr	r0, [pc, #52]	; (800150c <transmission_error+0x68>)
 80014d8:	f7ff fee3 	bl	80012a2 <GPIO_WritePin>
	GPIO_WritePin(GPIOA, 5, 0);
 80014dc:	2200      	movs	r2, #0
 80014de:	2105      	movs	r1, #5
 80014e0:	480a      	ldr	r0, [pc, #40]	; (800150c <transmission_error+0x68>)
 80014e2:	f7ff fede 	bl	80012a2 <GPIO_WritePin>
	for (int i = 0; i < 1000000; i++)
 80014e6:	2300      	movs	r3, #0
 80014e8:	607b      	str	r3, [r7, #4]
 80014ea:	e002      	b.n	80014f2 <transmission_error+0x4e>
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	3301      	adds	r3, #1
 80014f0:	607b      	str	r3, [r7, #4]
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	4a06      	ldr	r2, [pc, #24]	; (8001510 <transmission_error+0x6c>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	ddf8      	ble.n	80014ec <transmission_error+0x48>
		;
	GPIO_WritePin(GPIOA, 2, 0);
 80014fa:	2200      	movs	r2, #0
 80014fc:	2102      	movs	r1, #2
 80014fe:	4803      	ldr	r0, [pc, #12]	; (800150c <transmission_error+0x68>)
 8001500:	f7ff fecf 	bl	80012a2 <GPIO_WritePin>
}
 8001504:	bf00      	nop
 8001506:	3708      	adds	r7, #8
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}
 800150c:	40020000 	.word	0x40020000
 8001510:	000f423f 	.word	0x000f423f

08001514 <fifo_error>:

void fifo_error()
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
	GPIO_WritePin(GPIOA, 0, 0);
 800151a:	2200      	movs	r2, #0
 800151c:	2100      	movs	r1, #0
 800151e:	4817      	ldr	r0, [pc, #92]	; (800157c <fifo_error+0x68>)
 8001520:	f7ff febf 	bl	80012a2 <GPIO_WritePin>
	GPIO_WritePin(GPIOA, 1, 0);
 8001524:	2200      	movs	r2, #0
 8001526:	2101      	movs	r1, #1
 8001528:	4814      	ldr	r0, [pc, #80]	; (800157c <fifo_error+0x68>)
 800152a:	f7ff feba 	bl	80012a2 <GPIO_WritePin>
	GPIO_WritePin(GPIOA, 2, 0);
 800152e:	2200      	movs	r2, #0
 8001530:	2102      	movs	r1, #2
 8001532:	4812      	ldr	r0, [pc, #72]	; (800157c <fifo_error+0x68>)
 8001534:	f7ff feb5 	bl	80012a2 <GPIO_WritePin>
	GPIO_WritePin(GPIOA, 3, 0);
 8001538:	2200      	movs	r2, #0
 800153a:	2103      	movs	r1, #3
 800153c:	480f      	ldr	r0, [pc, #60]	; (800157c <fifo_error+0x68>)
 800153e:	f7ff feb0 	bl	80012a2 <GPIO_WritePin>
	GPIO_WritePin(GPIOA, 4, 1);
 8001542:	2201      	movs	r2, #1
 8001544:	2104      	movs	r1, #4
 8001546:	480d      	ldr	r0, [pc, #52]	; (800157c <fifo_error+0x68>)
 8001548:	f7ff feab 	bl	80012a2 <GPIO_WritePin>
	GPIO_WritePin(GPIOA, 5, 0);
 800154c:	2200      	movs	r2, #0
 800154e:	2105      	movs	r1, #5
 8001550:	480a      	ldr	r0, [pc, #40]	; (800157c <fifo_error+0x68>)
 8001552:	f7ff fea6 	bl	80012a2 <GPIO_WritePin>
	for (int i = 0; i < 1000000; i++)
 8001556:	2300      	movs	r3, #0
 8001558:	607b      	str	r3, [r7, #4]
 800155a:	e002      	b.n	8001562 <fifo_error+0x4e>
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	3301      	adds	r3, #1
 8001560:	607b      	str	r3, [r7, #4]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	4a06      	ldr	r2, [pc, #24]	; (8001580 <fifo_error+0x6c>)
 8001566:	4293      	cmp	r3, r2
 8001568:	ddf8      	ble.n	800155c <fifo_error+0x48>
		;
	GPIO_WritePin(GPIOA, 4, 0);
 800156a:	2200      	movs	r2, #0
 800156c:	2104      	movs	r1, #4
 800156e:	4803      	ldr	r0, [pc, #12]	; (800157c <fifo_error+0x68>)
 8001570:	f7ff fe97 	bl	80012a2 <GPIO_WritePin>
}
 8001574:	bf00      	nop
 8001576:	3708      	adds	r7, #8
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	40020000 	.word	0x40020000
 8001580:	000f423f 	.word	0x000f423f

08001584 <direct_error>:

void direct_error()
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
	GPIO_WritePin(GPIOA, 0, 0);
 800158a:	2200      	movs	r2, #0
 800158c:	2100      	movs	r1, #0
 800158e:	4817      	ldr	r0, [pc, #92]	; (80015ec <direct_error+0x68>)
 8001590:	f7ff fe87 	bl	80012a2 <GPIO_WritePin>
	GPIO_WritePin(GPIOA, 1, 0);
 8001594:	2200      	movs	r2, #0
 8001596:	2101      	movs	r1, #1
 8001598:	4814      	ldr	r0, [pc, #80]	; (80015ec <direct_error+0x68>)
 800159a:	f7ff fe82 	bl	80012a2 <GPIO_WritePin>
	GPIO_WritePin(GPIOA, 2, 0);
 800159e:	2200      	movs	r2, #0
 80015a0:	2102      	movs	r1, #2
 80015a2:	4812      	ldr	r0, [pc, #72]	; (80015ec <direct_error+0x68>)
 80015a4:	f7ff fe7d 	bl	80012a2 <GPIO_WritePin>
	GPIO_WritePin(GPIOA, 3, 0);
 80015a8:	2200      	movs	r2, #0
 80015aa:	2103      	movs	r1, #3
 80015ac:	480f      	ldr	r0, [pc, #60]	; (80015ec <direct_error+0x68>)
 80015ae:	f7ff fe78 	bl	80012a2 <GPIO_WritePin>
	GPIO_WritePin(GPIOA, 4, 0);
 80015b2:	2200      	movs	r2, #0
 80015b4:	2104      	movs	r1, #4
 80015b6:	480d      	ldr	r0, [pc, #52]	; (80015ec <direct_error+0x68>)
 80015b8:	f7ff fe73 	bl	80012a2 <GPIO_WritePin>
	GPIO_WritePin(GPIOA, 5, 1);
 80015bc:	2201      	movs	r2, #1
 80015be:	2105      	movs	r1, #5
 80015c0:	480a      	ldr	r0, [pc, #40]	; (80015ec <direct_error+0x68>)
 80015c2:	f7ff fe6e 	bl	80012a2 <GPIO_WritePin>
	for (int i = 0; i < 1000000; i++)
 80015c6:	2300      	movs	r3, #0
 80015c8:	607b      	str	r3, [r7, #4]
 80015ca:	e002      	b.n	80015d2 <direct_error+0x4e>
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	3301      	adds	r3, #1
 80015d0:	607b      	str	r3, [r7, #4]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	4a06      	ldr	r2, [pc, #24]	; (80015f0 <direct_error+0x6c>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	ddf8      	ble.n	80015cc <direct_error+0x48>
		;
	GPIO_WritePin(GPIOA, 5, 0);
 80015da:	2200      	movs	r2, #0
 80015dc:	2105      	movs	r1, #5
 80015de:	4803      	ldr	r0, [pc, #12]	; (80015ec <direct_error+0x68>)
 80015e0:	f7ff fe5f 	bl	80012a2 <GPIO_WritePin>
}
 80015e4:	bf00      	nop
 80015e6:	3708      	adds	r7, #8
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	40020000 	.word	0x40020000
 80015f0:	000f423f 	.word	0x000f423f

080015f4 <initialize_dma>:

void initialize_dma()
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b088      	sub	sp, #32
 80015f8:	af00      	add	r7, sp, #0
	DMA_InitializationObject config_object;

	config_object.stream = STREAM0;
 80015fa:	2300      	movs	r3, #0
 80015fc:	703b      	strb	r3, [r7, #0]
	config_object.channel = CHANNEL0;
 80015fe:	2300      	movs	r3, #0
 8001600:	707b      	strb	r3, [r7, #1]
	config_object.memory_address = (uint32)dest;
 8001602:	4b1e      	ldr	r3, [pc, #120]	; (800167c <initialize_dma+0x88>)
 8001604:	60bb      	str	r3, [r7, #8]
	config_object.peripheral_address = (uint32)src;
 8001606:	4b1e      	ldr	r3, [pc, #120]	; (8001680 <initialize_dma+0x8c>)
 8001608:	607b      	str	r3, [r7, #4]
	config_object.direct_mode = DIRECT_MODE_DISABLED;
 800160a:	2300      	movs	r3, #0
 800160c:	73bb      	strb	r3, [r7, #14]
	config_object.direction = MEMORY_MEMORY;
 800160e:	2302      	movs	r3, #2
 8001610:	737b      	strb	r3, [r7, #13]
	config_object.n_of_transfers = sizeof(src) / sizeof(uint32);
 8001612:	2364      	movs	r3, #100	; 0x64
 8001614:	807b      	strh	r3, [r7, #2]
	config_object.memory_size = WORD;
 8001616:	2302      	movs	r3, #2
 8001618:	747b      	strb	r3, [r7, #17]
	config_object.peripheral_size = WORD;
 800161a:	2302      	movs	r3, #2
 800161c:	743b      	strb	r3, [r7, #16]
	config_object.memory_increment_mode = INCREMENT;
 800161e:	2301      	movs	r3, #1
 8001620:	74fb      	strb	r3, [r7, #19]
	config_object.peripheral_increment_mode = INCREMENT;
 8001622:	2301      	movs	r3, #1
 8001624:	74bb      	strb	r3, [r7, #18]
	config_object.memory_transfer_type = SINGLE;
 8001626:	2300      	movs	r3, #0
 8001628:	75fb      	strb	r3, [r7, #23]
	config_object.flow_controller = DMA_FLOW_CTRLED;
 800162a:	2300      	movs	r3, #0
 800162c:	757b      	strb	r3, [r7, #21]
	config_object.peripheral_transfer_type = SINGLE;
 800162e:	2300      	movs	r3, #0
 8001630:	75bb      	strb	r3, [r7, #22]
	config_object.priority = VERY_HIGH_PRIORITY;
 8001632:	2303      	movs	r3, #3
 8001634:	733b      	strb	r3, [r7, #12]
	config_object.fifo_threshold = FULL;
 8001636:	2303      	movs	r3, #3
 8001638:	73fb      	strb	r3, [r7, #15]
	config_object.transfer_complete_interrupt = ENABLED;
 800163a:	2301      	movs	r3, #1
 800163c:	763b      	strb	r3, [r7, #24]
	config_object.transfer_error_interrupt = ENABLED;
 800163e:	2301      	movs	r3, #1
 8001640:	76fb      	strb	r3, [r7, #27]
	config_object.fifo_error_interrupt = ENABLED;
 8001642:	2301      	movs	r3, #1
 8001644:	76bb      	strb	r3, [r7, #26]
	config_object.direct_mode_error_interrupt = ENABLED;
 8001646:	2301      	movs	r3, #1
 8001648:	773b      	strb	r3, [r7, #28]
	config_object.half_transfer_interrupt = DISABLED;
 800164a:	2300      	movs	r3, #0
 800164c:	767b      	strb	r3, [r7, #25]

	Enable_NVIC(DMA2_STREAM0_IRQ / 32, DMA2_STREAM0_IRQ % 32);
 800164e:	2118      	movs	r1, #24
 8001650:	2001      	movs	r0, #1
 8001652:	f7ff fe65 	bl	8001320 <Enable_NVIC>
	DMA_EnableClock(DMA2);
 8001656:	480b      	ldr	r0, [pc, #44]	; (8001684 <initialize_dma+0x90>)
 8001658:	f7ff faf2 	bl	8000c40 <DMA_EnableClock>
	DMA_Config(DMA2, &config_object);
 800165c:	463b      	mov	r3, r7
 800165e:	4619      	mov	r1, r3
 8001660:	4808      	ldr	r0, [pc, #32]	; (8001684 <initialize_dma+0x90>)
 8001662:	f7ff fb0d 	bl	8000c80 <DMA_Config>
	DMA_BeginTransport(DMA2, &config_object);
 8001666:	463b      	mov	r3, r7
 8001668:	4619      	mov	r1, r3
 800166a:	4806      	ldr	r0, [pc, #24]	; (8001684 <initialize_dma+0x90>)
 800166c:	f7ff fd10 	bl	8001090 <DMA_BeginTransport>
	transmission_started();
 8001670:	f7ff fe76 	bl	8001360 <transmission_started>
}
 8001674:	bf00      	nop
 8001676:	3720      	adds	r7, #32
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}
 800167c:	2000008c 	.word	0x2000008c
 8001680:	2000021c 	.word	0x2000021c
 8001684:	40026400 	.word	0x40026400

08001688 <main>:

int main()
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
	for (int i = 1; i <= 100; i++)
 800168e:	2301      	movs	r3, #1
 8001690:	607b      	str	r3, [r7, #4]
 8001692:	e00c      	b.n	80016ae <main+0x26>
	{
		src[i - 1] = 100 * i;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2264      	movs	r2, #100	; 0x64
 8001698:	fb02 f203 	mul.w	r2, r2, r3
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	3b01      	subs	r3, #1
 80016a0:	4611      	mov	r1, r2
 80016a2:	4a0f      	ldr	r2, [pc, #60]	; (80016e0 <main+0x58>)
 80016a4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 1; i <= 100; i++)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	3301      	adds	r3, #1
 80016ac:	607b      	str	r3, [r7, #4]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2b64      	cmp	r3, #100	; 0x64
 80016b2:	ddef      	ble.n	8001694 <main+0xc>
	}

	GPIO_EnableClock(PORTA);
 80016b4:	2000      	movs	r0, #0
 80016b6:	f7ff fd79 	bl	80011ac <GPIO_EnableClock>

	for (int i = 0; i < 6; i++)
 80016ba:	2300      	movs	r3, #0
 80016bc:	603b      	str	r3, [r7, #0]
 80016be:	e009      	b.n	80016d4 <main+0x4c>
	{
		GPIO_Init(GPIOA, i, OUTPUT, PUSH_PULL);
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	b2d9      	uxtb	r1, r3
 80016c4:	2300      	movs	r3, #0
 80016c6:	2201      	movs	r2, #1
 80016c8:	4806      	ldr	r0, [pc, #24]	; (80016e4 <main+0x5c>)
 80016ca:	f7ff fd87 	bl	80011dc <GPIO_Init>
	for (int i = 0; i < 6; i++)
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	3301      	adds	r3, #1
 80016d2:	603b      	str	r3, [r7, #0]
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	2b05      	cmp	r3, #5
 80016d8:	ddf2      	ble.n	80016c0 <main+0x38>
	}

	initialize_dma();
 80016da:	f7ff ff8b 	bl	80015f4 <initialize_dma>

	while (1)
 80016de:	e7fe      	b.n	80016de <main+0x56>
 80016e0:	2000021c 	.word	0x2000021c
 80016e4:	40020000 	.word	0x40020000

080016e8 <DMA_Interrupts_Callout_Notification>:

	return 0;
}

void DMA_Interrupts_Callout_Notification()
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
	transmiting = 0;
 80016ee:	4b2c      	ldr	r3, [pc, #176]	; (80017a0 <DMA_Interrupts_Callout_Notification+0xb8>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	701a      	strb	r2, [r3, #0]
	DMA_Transfer_States *interrupts_states = DMA_GET_Transfer_State(DMA2, STREAM0);
 80016f4:	2100      	movs	r1, #0
 80016f6:	482b      	ldr	r0, [pc, #172]	; (80017a4 <DMA_Interrupts_Callout_Notification+0xbc>)
 80016f8:	f7ff fce4 	bl	80010c4 <DMA_GET_Transfer_State>
 80016fc:	6078      	str	r0, [r7, #4]
	if (interrupts_states->flags.TransferComplete)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	781b      	ldrb	r3, [r3, #0]
 8001702:	f003 0310 	and.w	r3, r3, #16
 8001706:	b2db      	uxtb	r3, r3
 8001708:	2b00      	cmp	r3, #0
 800170a:	d019      	beq.n	8001740 <DMA_Interrupts_Callout_Notification+0x58>
	{
		transmission_ended();
 800170c:	f7ff fe5a 	bl	80013c4 <transmission_ended>
		//		Check data integrity
		for (int i = 0; i < 100; i++)
 8001710:	2300      	movs	r3, #0
 8001712:	603b      	str	r3, [r7, #0]
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	2b63      	cmp	r3, #99	; 0x63
 8001718:	dc0c      	bgt.n	8001734 <DMA_Interrupts_Callout_Notification+0x4c>
		{
			if (src[i] != dest[i])
 800171a:	4a23      	ldr	r2, [pc, #140]	; (80017a8 <DMA_Interrupts_Callout_Notification+0xc0>)
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001722:	4922      	ldr	r1, [pc, #136]	; (80017ac <DMA_Interrupts_Callout_Notification+0xc4>)
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800172a:	429a      	cmp	r2, r3
 800172c:	d001      	beq.n	8001732 <DMA_Interrupts_Callout_Notification+0x4a>
			{
				data_integrity_error();
 800172e:	f7ff fe81 	bl	8001434 <data_integrity_error>
			}
			break;
 8001732:	bf00      	nop
		}
		Clear_One_Interrupt(DMA2, STREAM0, TRANSFER_COMPLETE);
 8001734:	2220      	movs	r2, #32
 8001736:	2100      	movs	r1, #0
 8001738:	481a      	ldr	r0, [pc, #104]	; (80017a4 <DMA_Interrupts_Callout_Notification+0xbc>)
 800173a:	f7ff f9fd 	bl	8000b38 <Clear_One_Interrupt>
	else if (interrupts_states->flags.DirectModeError)
	{
		direct_error();
		Clear_One_Interrupt(DMA2, STREAM0, DIRECT_MODE_ERROR);
	}
}
 800173e:	e02b      	b.n	8001798 <DMA_Interrupts_Callout_Notification+0xb0>
	else if (interrupts_states->flags.TransferError)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	f003 0304 	and.w	r3, r3, #4
 8001748:	b2db      	uxtb	r3, r3
 800174a:	2b00      	cmp	r3, #0
 800174c:	d007      	beq.n	800175e <DMA_Interrupts_Callout_Notification+0x76>
		transmission_error();
 800174e:	f7ff fea9 	bl	80014a4 <transmission_error>
		Clear_One_Interrupt(DMA2, STREAM0, TRANSFER_ERROR);
 8001752:	2208      	movs	r2, #8
 8001754:	2100      	movs	r1, #0
 8001756:	4813      	ldr	r0, [pc, #76]	; (80017a4 <DMA_Interrupts_Callout_Notification+0xbc>)
 8001758:	f7ff f9ee 	bl	8000b38 <Clear_One_Interrupt>
}
 800175c:	e01c      	b.n	8001798 <DMA_Interrupts_Callout_Notification+0xb0>
	else if (interrupts_states->flags.FIFOError)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	781b      	ldrb	r3, [r3, #0]
 8001762:	f003 0301 	and.w	r3, r3, #1
 8001766:	b2db      	uxtb	r3, r3
 8001768:	2b00      	cmp	r3, #0
 800176a:	d007      	beq.n	800177c <DMA_Interrupts_Callout_Notification+0x94>
		fifo_error();
 800176c:	f7ff fed2 	bl	8001514 <fifo_error>
		Clear_One_Interrupt(DMA2, STREAM0, FIFO_ERROR);
 8001770:	2201      	movs	r2, #1
 8001772:	2100      	movs	r1, #0
 8001774:	480b      	ldr	r0, [pc, #44]	; (80017a4 <DMA_Interrupts_Callout_Notification+0xbc>)
 8001776:	f7ff f9df 	bl	8000b38 <Clear_One_Interrupt>
}
 800177a:	e00d      	b.n	8001798 <DMA_Interrupts_Callout_Notification+0xb0>
	else if (interrupts_states->flags.DirectModeError)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	f003 0302 	and.w	r3, r3, #2
 8001784:	b2db      	uxtb	r3, r3
 8001786:	2b00      	cmp	r3, #0
 8001788:	d006      	beq.n	8001798 <DMA_Interrupts_Callout_Notification+0xb0>
		direct_error();
 800178a:	f7ff fefb 	bl	8001584 <direct_error>
		Clear_One_Interrupt(DMA2, STREAM0, DIRECT_MODE_ERROR);
 800178e:	2204      	movs	r2, #4
 8001790:	2100      	movs	r1, #0
 8001792:	4804      	ldr	r0, [pc, #16]	; (80017a4 <DMA_Interrupts_Callout_Notification+0xbc>)
 8001794:	f7ff f9d0 	bl	8000b38 <Clear_One_Interrupt>
}
 8001798:	bf00      	nop
 800179a:	3708      	adds	r7, #8
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	20000000 	.word	0x20000000
 80017a4:	40026400 	.word	0x40026400
 80017a8:	2000021c 	.word	0x2000021c
 80017ac:	2000008c 	.word	0x2000008c

080017b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017b4:	4b06      	ldr	r3, [pc, #24]	; (80017d0 <SystemInit+0x20>)
 80017b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017ba:	4a05      	ldr	r2, [pc, #20]	; (80017d0 <SystemInit+0x20>)
 80017bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017c4:	bf00      	nop
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop
 80017d0:	e000ed00 	.word	0xe000ed00

080017d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80017d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800180c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017d8:	480d      	ldr	r0, [pc, #52]	; (8001810 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80017da:	490e      	ldr	r1, [pc, #56]	; (8001814 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80017dc:	4a0e      	ldr	r2, [pc, #56]	; (8001818 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80017de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017e0:	e002      	b.n	80017e8 <LoopCopyDataInit>

080017e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017e6:	3304      	adds	r3, #4

080017e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017ec:	d3f9      	bcc.n	80017e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017ee:	4a0b      	ldr	r2, [pc, #44]	; (800181c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80017f0:	4c0b      	ldr	r4, [pc, #44]	; (8001820 <LoopFillZerobss+0x26>)
  movs r3, #0
 80017f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017f4:	e001      	b.n	80017fa <LoopFillZerobss>

080017f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017f8:	3204      	adds	r2, #4

080017fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017fc:	d3fb      	bcc.n	80017f6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80017fe:	f7ff ffd7 	bl	80017b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001802:	f000 f811 	bl	8001828 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001806:	f7ff ff3f 	bl	8001688 <main>
  bx  lr    
 800180a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800180c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001810:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001814:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001818:	08001cb8 	.word	0x08001cb8
  ldr r2, =_sbss
 800181c:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001820:	200003ac 	.word	0x200003ac

08001824 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001824:	e7fe      	b.n	8001824 <ADC_IRQHandler>
	...

08001828 <__libc_init_array>:
 8001828:	b570      	push	{r4, r5, r6, lr}
 800182a:	4d0d      	ldr	r5, [pc, #52]	; (8001860 <__libc_init_array+0x38>)
 800182c:	4c0d      	ldr	r4, [pc, #52]	; (8001864 <__libc_init_array+0x3c>)
 800182e:	1b64      	subs	r4, r4, r5
 8001830:	10a4      	asrs	r4, r4, #2
 8001832:	2600      	movs	r6, #0
 8001834:	42a6      	cmp	r6, r4
 8001836:	d109      	bne.n	800184c <__libc_init_array+0x24>
 8001838:	4d0b      	ldr	r5, [pc, #44]	; (8001868 <__libc_init_array+0x40>)
 800183a:	4c0c      	ldr	r4, [pc, #48]	; (800186c <__libc_init_array+0x44>)
 800183c:	f000 fa2a 	bl	8001c94 <_init>
 8001840:	1b64      	subs	r4, r4, r5
 8001842:	10a4      	asrs	r4, r4, #2
 8001844:	2600      	movs	r6, #0
 8001846:	42a6      	cmp	r6, r4
 8001848:	d105      	bne.n	8001856 <__libc_init_array+0x2e>
 800184a:	bd70      	pop	{r4, r5, r6, pc}
 800184c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001850:	4798      	blx	r3
 8001852:	3601      	adds	r6, #1
 8001854:	e7ee      	b.n	8001834 <__libc_init_array+0xc>
 8001856:	f855 3b04 	ldr.w	r3, [r5], #4
 800185a:	4798      	blx	r3
 800185c:	3601      	adds	r6, #1
 800185e:	e7f2      	b.n	8001846 <__libc_init_array+0x1e>
 8001860:	08001cb0 	.word	0x08001cb0
 8001864:	08001cb0 	.word	0x08001cb0
 8001868:	08001cb0 	.word	0x08001cb0
 800186c:	08001cb4 	.word	0x08001cb4

08001870 <log>:
 8001870:	b538      	push	{r3, r4, r5, lr}
 8001872:	ed2d 8b02 	vpush	{d8}
 8001876:	ec55 4b10 	vmov	r4, r5, d0
 800187a:	f000 f841 	bl	8001900 <__ieee754_log>
 800187e:	4b1e      	ldr	r3, [pc, #120]	; (80018f8 <log+0x88>)
 8001880:	eeb0 8a40 	vmov.f32	s16, s0
 8001884:	eef0 8a60 	vmov.f32	s17, s1
 8001888:	f993 3000 	ldrsb.w	r3, [r3]
 800188c:	3301      	adds	r3, #1
 800188e:	d01a      	beq.n	80018c6 <log+0x56>
 8001890:	4622      	mov	r2, r4
 8001892:	462b      	mov	r3, r5
 8001894:	4620      	mov	r0, r4
 8001896:	4629      	mov	r1, r5
 8001898:	f7ff f8f4 	bl	8000a84 <__aeabi_dcmpun>
 800189c:	b998      	cbnz	r0, 80018c6 <log+0x56>
 800189e:	2200      	movs	r2, #0
 80018a0:	2300      	movs	r3, #0
 80018a2:	4620      	mov	r0, r4
 80018a4:	4629      	mov	r1, r5
 80018a6:	f7ff f8e3 	bl	8000a70 <__aeabi_dcmpgt>
 80018aa:	b960      	cbnz	r0, 80018c6 <log+0x56>
 80018ac:	2200      	movs	r2, #0
 80018ae:	2300      	movs	r3, #0
 80018b0:	4620      	mov	r0, r4
 80018b2:	4629      	mov	r1, r5
 80018b4:	f7ff f8b4 	bl	8000a20 <__aeabi_dcmpeq>
 80018b8:	b160      	cbz	r0, 80018d4 <log+0x64>
 80018ba:	f000 f9e5 	bl	8001c88 <__errno>
 80018be:	ed9f 8b0c 	vldr	d8, [pc, #48]	; 80018f0 <log+0x80>
 80018c2:	2322      	movs	r3, #34	; 0x22
 80018c4:	6003      	str	r3, [r0, #0]
 80018c6:	eeb0 0a48 	vmov.f32	s0, s16
 80018ca:	eef0 0a68 	vmov.f32	s1, s17
 80018ce:	ecbd 8b02 	vpop	{d8}
 80018d2:	bd38      	pop	{r3, r4, r5, pc}
 80018d4:	f000 f9d8 	bl	8001c88 <__errno>
 80018d8:	ecbd 8b02 	vpop	{d8}
 80018dc:	2321      	movs	r3, #33	; 0x21
 80018de:	6003      	str	r3, [r0, #0]
 80018e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80018e4:	4805      	ldr	r0, [pc, #20]	; (80018fc <log+0x8c>)
 80018e6:	f000 b9c7 	b.w	8001c78 <nan>
 80018ea:	bf00      	nop
 80018ec:	f3af 8000 	nop.w
 80018f0:	00000000 	.word	0x00000000
 80018f4:	fff00000 	.word	0xfff00000
 80018f8:	20000068 	.word	0x20000068
 80018fc:	08001cac 	.word	0x08001cac

08001900 <__ieee754_log>:
 8001900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001904:	ec51 0b10 	vmov	r0, r1, d0
 8001908:	ed2d 8b04 	vpush	{d8-d9}
 800190c:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8001910:	b083      	sub	sp, #12
 8001912:	460d      	mov	r5, r1
 8001914:	da29      	bge.n	800196a <__ieee754_log+0x6a>
 8001916:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800191a:	4303      	orrs	r3, r0
 800191c:	ee10 2a10 	vmov	r2, s0
 8001920:	d10c      	bne.n	800193c <__ieee754_log+0x3c>
 8001922:	49cf      	ldr	r1, [pc, #828]	; (8001c60 <__ieee754_log+0x360>)
 8001924:	2200      	movs	r2, #0
 8001926:	2300      	movs	r3, #0
 8001928:	2000      	movs	r0, #0
 800192a:	f7fe ff3b 	bl	80007a4 <__aeabi_ddiv>
 800192e:	ec41 0b10 	vmov	d0, r0, r1
 8001932:	b003      	add	sp, #12
 8001934:	ecbd 8b04 	vpop	{d8-d9}
 8001938:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800193c:	2900      	cmp	r1, #0
 800193e:	da05      	bge.n	800194c <__ieee754_log+0x4c>
 8001940:	460b      	mov	r3, r1
 8001942:	f7fe fc4d 	bl	80001e0 <__aeabi_dsub>
 8001946:	2200      	movs	r2, #0
 8001948:	2300      	movs	r3, #0
 800194a:	e7ee      	b.n	800192a <__ieee754_log+0x2a>
 800194c:	4bc5      	ldr	r3, [pc, #788]	; (8001c64 <__ieee754_log+0x364>)
 800194e:	2200      	movs	r2, #0
 8001950:	f7fe fdfe 	bl	8000550 <__aeabi_dmul>
 8001954:	f06f 0335 	mvn.w	r3, #53	; 0x35
 8001958:	460d      	mov	r5, r1
 800195a:	4ac3      	ldr	r2, [pc, #780]	; (8001c68 <__ieee754_log+0x368>)
 800195c:	4295      	cmp	r5, r2
 800195e:	dd06      	ble.n	800196e <__ieee754_log+0x6e>
 8001960:	4602      	mov	r2, r0
 8001962:	460b      	mov	r3, r1
 8001964:	f7fe fc3e 	bl	80001e4 <__adddf3>
 8001968:	e7e1      	b.n	800192e <__ieee754_log+0x2e>
 800196a:	2300      	movs	r3, #0
 800196c:	e7f5      	b.n	800195a <__ieee754_log+0x5a>
 800196e:	152c      	asrs	r4, r5, #20
 8001970:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8001974:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8001978:	441c      	add	r4, r3
 800197a:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 800197e:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 8001982:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001986:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 800198a:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 800198e:	ea42 0105 	orr.w	r1, r2, r5
 8001992:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 8001996:	2200      	movs	r2, #0
 8001998:	4bb4      	ldr	r3, [pc, #720]	; (8001c6c <__ieee754_log+0x36c>)
 800199a:	f7fe fc21 	bl	80001e0 <__aeabi_dsub>
 800199e:	1cab      	adds	r3, r5, #2
 80019a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80019a4:	2b02      	cmp	r3, #2
 80019a6:	4682      	mov	sl, r0
 80019a8:	468b      	mov	fp, r1
 80019aa:	f04f 0200 	mov.w	r2, #0
 80019ae:	dc53      	bgt.n	8001a58 <__ieee754_log+0x158>
 80019b0:	2300      	movs	r3, #0
 80019b2:	f7ff f835 	bl	8000a20 <__aeabi_dcmpeq>
 80019b6:	b1d0      	cbz	r0, 80019ee <__ieee754_log+0xee>
 80019b8:	2c00      	cmp	r4, #0
 80019ba:	f000 8122 	beq.w	8001c02 <__ieee754_log+0x302>
 80019be:	4620      	mov	r0, r4
 80019c0:	f7fe fd5c 	bl	800047c <__aeabi_i2d>
 80019c4:	a390      	add	r3, pc, #576	; (adr r3, 8001c08 <__ieee754_log+0x308>)
 80019c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019ca:	4606      	mov	r6, r0
 80019cc:	460f      	mov	r7, r1
 80019ce:	f7fe fdbf 	bl	8000550 <__aeabi_dmul>
 80019d2:	a38f      	add	r3, pc, #572	; (adr r3, 8001c10 <__ieee754_log+0x310>)
 80019d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019d8:	4604      	mov	r4, r0
 80019da:	460d      	mov	r5, r1
 80019dc:	4630      	mov	r0, r6
 80019de:	4639      	mov	r1, r7
 80019e0:	f7fe fdb6 	bl	8000550 <__aeabi_dmul>
 80019e4:	4602      	mov	r2, r0
 80019e6:	460b      	mov	r3, r1
 80019e8:	4620      	mov	r0, r4
 80019ea:	4629      	mov	r1, r5
 80019ec:	e7ba      	b.n	8001964 <__ieee754_log+0x64>
 80019ee:	a38a      	add	r3, pc, #552	; (adr r3, 8001c18 <__ieee754_log+0x318>)
 80019f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019f4:	4650      	mov	r0, sl
 80019f6:	4659      	mov	r1, fp
 80019f8:	f7fe fdaa 	bl	8000550 <__aeabi_dmul>
 80019fc:	4602      	mov	r2, r0
 80019fe:	460b      	mov	r3, r1
 8001a00:	2000      	movs	r0, #0
 8001a02:	499b      	ldr	r1, [pc, #620]	; (8001c70 <__ieee754_log+0x370>)
 8001a04:	f7fe fbec 	bl	80001e0 <__aeabi_dsub>
 8001a08:	4652      	mov	r2, sl
 8001a0a:	4606      	mov	r6, r0
 8001a0c:	460f      	mov	r7, r1
 8001a0e:	465b      	mov	r3, fp
 8001a10:	4650      	mov	r0, sl
 8001a12:	4659      	mov	r1, fp
 8001a14:	f7fe fd9c 	bl	8000550 <__aeabi_dmul>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	460b      	mov	r3, r1
 8001a1c:	4630      	mov	r0, r6
 8001a1e:	4639      	mov	r1, r7
 8001a20:	f7fe fd96 	bl	8000550 <__aeabi_dmul>
 8001a24:	4606      	mov	r6, r0
 8001a26:	460f      	mov	r7, r1
 8001a28:	b914      	cbnz	r4, 8001a30 <__ieee754_log+0x130>
 8001a2a:	4632      	mov	r2, r6
 8001a2c:	463b      	mov	r3, r7
 8001a2e:	e0a2      	b.n	8001b76 <__ieee754_log+0x276>
 8001a30:	4620      	mov	r0, r4
 8001a32:	f7fe fd23 	bl	800047c <__aeabi_i2d>
 8001a36:	a374      	add	r3, pc, #464	; (adr r3, 8001c08 <__ieee754_log+0x308>)
 8001a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a3c:	4680      	mov	r8, r0
 8001a3e:	4689      	mov	r9, r1
 8001a40:	f7fe fd86 	bl	8000550 <__aeabi_dmul>
 8001a44:	a372      	add	r3, pc, #456	; (adr r3, 8001c10 <__ieee754_log+0x310>)
 8001a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a4a:	4604      	mov	r4, r0
 8001a4c:	460d      	mov	r5, r1
 8001a4e:	4640      	mov	r0, r8
 8001a50:	4649      	mov	r1, r9
 8001a52:	f7fe fd7d 	bl	8000550 <__aeabi_dmul>
 8001a56:	e0a7      	b.n	8001ba8 <__ieee754_log+0x2a8>
 8001a58:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a5c:	f7fe fbc2 	bl	80001e4 <__adddf3>
 8001a60:	4602      	mov	r2, r0
 8001a62:	460b      	mov	r3, r1
 8001a64:	4650      	mov	r0, sl
 8001a66:	4659      	mov	r1, fp
 8001a68:	f7fe fe9c 	bl	80007a4 <__aeabi_ddiv>
 8001a6c:	ec41 0b18 	vmov	d8, r0, r1
 8001a70:	4620      	mov	r0, r4
 8001a72:	f7fe fd03 	bl	800047c <__aeabi_i2d>
 8001a76:	ec53 2b18 	vmov	r2, r3, d8
 8001a7a:	ec41 0b19 	vmov	d9, r0, r1
 8001a7e:	ec51 0b18 	vmov	r0, r1, d8
 8001a82:	f7fe fd65 	bl	8000550 <__aeabi_dmul>
 8001a86:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 8001a8a:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 8001a8e:	9301      	str	r3, [sp, #4]
 8001a90:	4602      	mov	r2, r0
 8001a92:	460b      	mov	r3, r1
 8001a94:	4680      	mov	r8, r0
 8001a96:	4689      	mov	r9, r1
 8001a98:	f7fe fd5a 	bl	8000550 <__aeabi_dmul>
 8001a9c:	a360      	add	r3, pc, #384	; (adr r3, 8001c20 <__ieee754_log+0x320>)
 8001a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aa2:	4606      	mov	r6, r0
 8001aa4:	460f      	mov	r7, r1
 8001aa6:	f7fe fd53 	bl	8000550 <__aeabi_dmul>
 8001aaa:	a35f      	add	r3, pc, #380	; (adr r3, 8001c28 <__ieee754_log+0x328>)
 8001aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ab0:	f7fe fb98 	bl	80001e4 <__adddf3>
 8001ab4:	4632      	mov	r2, r6
 8001ab6:	463b      	mov	r3, r7
 8001ab8:	f7fe fd4a 	bl	8000550 <__aeabi_dmul>
 8001abc:	a35c      	add	r3, pc, #368	; (adr r3, 8001c30 <__ieee754_log+0x330>)
 8001abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ac2:	f7fe fb8f 	bl	80001e4 <__adddf3>
 8001ac6:	4632      	mov	r2, r6
 8001ac8:	463b      	mov	r3, r7
 8001aca:	f7fe fd41 	bl	8000550 <__aeabi_dmul>
 8001ace:	a35a      	add	r3, pc, #360	; (adr r3, 8001c38 <__ieee754_log+0x338>)
 8001ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ad4:	f7fe fb86 	bl	80001e4 <__adddf3>
 8001ad8:	4642      	mov	r2, r8
 8001ada:	464b      	mov	r3, r9
 8001adc:	f7fe fd38 	bl	8000550 <__aeabi_dmul>
 8001ae0:	a357      	add	r3, pc, #348	; (adr r3, 8001c40 <__ieee754_log+0x340>)
 8001ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ae6:	4680      	mov	r8, r0
 8001ae8:	4689      	mov	r9, r1
 8001aea:	4630      	mov	r0, r6
 8001aec:	4639      	mov	r1, r7
 8001aee:	f7fe fd2f 	bl	8000550 <__aeabi_dmul>
 8001af2:	a355      	add	r3, pc, #340	; (adr r3, 8001c48 <__ieee754_log+0x348>)
 8001af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001af8:	f7fe fb74 	bl	80001e4 <__adddf3>
 8001afc:	4632      	mov	r2, r6
 8001afe:	463b      	mov	r3, r7
 8001b00:	f7fe fd26 	bl	8000550 <__aeabi_dmul>
 8001b04:	a352      	add	r3, pc, #328	; (adr r3, 8001c50 <__ieee754_log+0x350>)
 8001b06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b0a:	f7fe fb6b 	bl	80001e4 <__adddf3>
 8001b0e:	4632      	mov	r2, r6
 8001b10:	463b      	mov	r3, r7
 8001b12:	f7fe fd1d 	bl	8000550 <__aeabi_dmul>
 8001b16:	460b      	mov	r3, r1
 8001b18:	4602      	mov	r2, r0
 8001b1a:	4649      	mov	r1, r9
 8001b1c:	4640      	mov	r0, r8
 8001b1e:	f7fe fb61 	bl	80001e4 <__adddf3>
 8001b22:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 8001b26:	9b01      	ldr	r3, [sp, #4]
 8001b28:	3551      	adds	r5, #81	; 0x51
 8001b2a:	431d      	orrs	r5, r3
 8001b2c:	2d00      	cmp	r5, #0
 8001b2e:	4680      	mov	r8, r0
 8001b30:	4689      	mov	r9, r1
 8001b32:	dd48      	ble.n	8001bc6 <__ieee754_log+0x2c6>
 8001b34:	4b4e      	ldr	r3, [pc, #312]	; (8001c70 <__ieee754_log+0x370>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	4650      	mov	r0, sl
 8001b3a:	4659      	mov	r1, fp
 8001b3c:	f7fe fd08 	bl	8000550 <__aeabi_dmul>
 8001b40:	4652      	mov	r2, sl
 8001b42:	465b      	mov	r3, fp
 8001b44:	f7fe fd04 	bl	8000550 <__aeabi_dmul>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	460b      	mov	r3, r1
 8001b4c:	4606      	mov	r6, r0
 8001b4e:	460f      	mov	r7, r1
 8001b50:	4640      	mov	r0, r8
 8001b52:	4649      	mov	r1, r9
 8001b54:	f7fe fb46 	bl	80001e4 <__adddf3>
 8001b58:	ec53 2b18 	vmov	r2, r3, d8
 8001b5c:	f7fe fcf8 	bl	8000550 <__aeabi_dmul>
 8001b60:	4680      	mov	r8, r0
 8001b62:	4689      	mov	r9, r1
 8001b64:	b964      	cbnz	r4, 8001b80 <__ieee754_log+0x280>
 8001b66:	4602      	mov	r2, r0
 8001b68:	460b      	mov	r3, r1
 8001b6a:	4630      	mov	r0, r6
 8001b6c:	4639      	mov	r1, r7
 8001b6e:	f7fe fb37 	bl	80001e0 <__aeabi_dsub>
 8001b72:	4602      	mov	r2, r0
 8001b74:	460b      	mov	r3, r1
 8001b76:	4650      	mov	r0, sl
 8001b78:	4659      	mov	r1, fp
 8001b7a:	f7fe fb31 	bl	80001e0 <__aeabi_dsub>
 8001b7e:	e6d6      	b.n	800192e <__ieee754_log+0x2e>
 8001b80:	a321      	add	r3, pc, #132	; (adr r3, 8001c08 <__ieee754_log+0x308>)
 8001b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b86:	ec51 0b19 	vmov	r0, r1, d9
 8001b8a:	f7fe fce1 	bl	8000550 <__aeabi_dmul>
 8001b8e:	a320      	add	r3, pc, #128	; (adr r3, 8001c10 <__ieee754_log+0x310>)
 8001b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b94:	4604      	mov	r4, r0
 8001b96:	460d      	mov	r5, r1
 8001b98:	ec51 0b19 	vmov	r0, r1, d9
 8001b9c:	f7fe fcd8 	bl	8000550 <__aeabi_dmul>
 8001ba0:	4642      	mov	r2, r8
 8001ba2:	464b      	mov	r3, r9
 8001ba4:	f7fe fb1e 	bl	80001e4 <__adddf3>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	460b      	mov	r3, r1
 8001bac:	4630      	mov	r0, r6
 8001bae:	4639      	mov	r1, r7
 8001bb0:	f7fe fb16 	bl	80001e0 <__aeabi_dsub>
 8001bb4:	4652      	mov	r2, sl
 8001bb6:	465b      	mov	r3, fp
 8001bb8:	f7fe fb12 	bl	80001e0 <__aeabi_dsub>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	460b      	mov	r3, r1
 8001bc0:	4620      	mov	r0, r4
 8001bc2:	4629      	mov	r1, r5
 8001bc4:	e7d9      	b.n	8001b7a <__ieee754_log+0x27a>
 8001bc6:	4602      	mov	r2, r0
 8001bc8:	460b      	mov	r3, r1
 8001bca:	4650      	mov	r0, sl
 8001bcc:	4659      	mov	r1, fp
 8001bce:	f7fe fb07 	bl	80001e0 <__aeabi_dsub>
 8001bd2:	ec53 2b18 	vmov	r2, r3, d8
 8001bd6:	f7fe fcbb 	bl	8000550 <__aeabi_dmul>
 8001bda:	4606      	mov	r6, r0
 8001bdc:	460f      	mov	r7, r1
 8001bde:	2c00      	cmp	r4, #0
 8001be0:	f43f af23 	beq.w	8001a2a <__ieee754_log+0x12a>
 8001be4:	a308      	add	r3, pc, #32	; (adr r3, 8001c08 <__ieee754_log+0x308>)
 8001be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bea:	ec51 0b19 	vmov	r0, r1, d9
 8001bee:	f7fe fcaf 	bl	8000550 <__aeabi_dmul>
 8001bf2:	a307      	add	r3, pc, #28	; (adr r3, 8001c10 <__ieee754_log+0x310>)
 8001bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bf8:	4604      	mov	r4, r0
 8001bfa:	460d      	mov	r5, r1
 8001bfc:	ec51 0b19 	vmov	r0, r1, d9
 8001c00:	e727      	b.n	8001a52 <__ieee754_log+0x152>
 8001c02:	ed9f 0b15 	vldr	d0, [pc, #84]	; 8001c58 <__ieee754_log+0x358>
 8001c06:	e694      	b.n	8001932 <__ieee754_log+0x32>
 8001c08:	fee00000 	.word	0xfee00000
 8001c0c:	3fe62e42 	.word	0x3fe62e42
 8001c10:	35793c76 	.word	0x35793c76
 8001c14:	3dea39ef 	.word	0x3dea39ef
 8001c18:	55555555 	.word	0x55555555
 8001c1c:	3fd55555 	.word	0x3fd55555
 8001c20:	df3e5244 	.word	0xdf3e5244
 8001c24:	3fc2f112 	.word	0x3fc2f112
 8001c28:	96cb03de 	.word	0x96cb03de
 8001c2c:	3fc74664 	.word	0x3fc74664
 8001c30:	94229359 	.word	0x94229359
 8001c34:	3fd24924 	.word	0x3fd24924
 8001c38:	55555593 	.word	0x55555593
 8001c3c:	3fe55555 	.word	0x3fe55555
 8001c40:	d078c69f 	.word	0xd078c69f
 8001c44:	3fc39a09 	.word	0x3fc39a09
 8001c48:	1d8e78af 	.word	0x1d8e78af
 8001c4c:	3fcc71c5 	.word	0x3fcc71c5
 8001c50:	9997fa04 	.word	0x9997fa04
 8001c54:	3fd99999 	.word	0x3fd99999
	...
 8001c60:	c3500000 	.word	0xc3500000
 8001c64:	43500000 	.word	0x43500000
 8001c68:	7fefffff 	.word	0x7fefffff
 8001c6c:	3ff00000 	.word	0x3ff00000
 8001c70:	3fe00000 	.word	0x3fe00000
 8001c74:	00000000 	.word	0x00000000

08001c78 <nan>:
 8001c78:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8001c80 <nan+0x8>
 8001c7c:	4770      	bx	lr
 8001c7e:	bf00      	nop
 8001c80:	00000000 	.word	0x00000000
 8001c84:	7ff80000 	.word	0x7ff80000

08001c88 <__errno>:
 8001c88:	4b01      	ldr	r3, [pc, #4]	; (8001c90 <__errno+0x8>)
 8001c8a:	6818      	ldr	r0, [r3, #0]
 8001c8c:	4770      	bx	lr
 8001c8e:	bf00      	nop
 8001c90:	20000004 	.word	0x20000004

08001c94 <_init>:
 8001c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c96:	bf00      	nop
 8001c98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c9a:	bc08      	pop	{r3}
 8001c9c:	469e      	mov	lr, r3
 8001c9e:	4770      	bx	lr

08001ca0 <_fini>:
 8001ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ca2:	bf00      	nop
 8001ca4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001ca6:	bc08      	pop	{r3}
 8001ca8:	469e      	mov	lr, r3
 8001caa:	4770      	bx	lr
